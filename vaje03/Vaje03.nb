(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 14.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    731889,      13813]
NotebookOptionsPosition[    722571,      13656]
NotebookOutlinePosition[    723023,      13673]
CellTagsIndexPosition[    722980,      13670]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Vaje  za  3.  teden", "Title",
 CellChangeTimes->{{3.919309408005101*^9, 3.91930941615196*^9}, {
  3.919996378698812*^9, 3.919996378882624*^9}, {3.950251633451831*^9, 
  3.950251633471827*^9}},ExpressionUUID->"53ccfd1a-4c2d-46b1-8bdb-\
63572cb080fa"],

Cell["6.  3.  2025", "Text",
 CellChangeTimes->{{3.919309422188853*^9, 3.919309429934455*^9}, {
  3.919996381114148*^9, 3.919996381998026*^9}, {3.9502516267759733`*^9, 
  3.95025163028166*^9}},ExpressionUUID->"06d0c6b1-1999-4140-99f0-\
10a8f144b90f"],

Cell[CellGroupData[{

Cell["Naloga  0", "Section",
 CellChangeTimes->{{3.9193131211996317`*^9, 3.919313124548905*^9}, {
  3.919322081949431*^9, 3.919322082012895*^9}, {3.950251615604597*^9, 
  3.950251619794106*^9}},ExpressionUUID->"be69bd61-b0ef-4752-bce9-\
227644e8d8fe"],

Cell["\<\
Napi\[SHacek]i  funkcijo quickSort, ki sprejme seznam in vrne urejen seznam. \
Za urejanje naj uporabi algoritem quick sort
\
\>", "Text",
 CellChangeTimes->{{3.919321974718964*^9, 3.919322032589476*^9}, 
   3.950252935168106*^9},ExpressionUUID->"90c84ab9-ce97-483d-ade2-\
613fa46deddc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"QuickSort", "[", "sez_", "]"}], " ", ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Length", "[", "sez", "]"}], " ", "<=", " ", "1"}], ",", "sez", 
    " ", ",", "\[IndentingNewLine]", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"sezManjse", ",", " ", "sezEnako", ",", " ", "sezVecje"}], 
       "}"}], ",", " ", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"sezManjse", " ", "=", " ", 
        RowBox[{"Select", "[", 
         RowBox[{"sez", ",", " ", 
          RowBox[{
           RowBox[{"#", " ", "<", " ", 
            RowBox[{"First", "[", "sez", "]"}]}], "&"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"sezEnako", " ", "=", " ", 
        RowBox[{"Select", "[", 
         RowBox[{"sez", ",", " ", 
          RowBox[{
           RowBox[{"#", " ", "==", " ", 
            RowBox[{"First", "[", "sez", "]"}]}], " ", "&"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"sezVecje", " ", "=", " ", 
        RowBox[{"Select", "[", 
         RowBox[{"sez", ",", " ", 
          RowBox[{
           RowBox[{"#", " ", ">", " ", 
            RowBox[{"First", "[", "sez", "]"}]}], "&"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"QuickSort", "[", "sezManjse", "]"}], ",", " ", "sezEnako", 
         ",", " ", 
         RowBox[{"QuickSort", "[", "sezVecje", "]"}]}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.9502531049813213`*^9, 3.950253133415865*^9}, {
  3.950253193665659*^9, 3.9502533476060085`*^9}, {3.9502535006002045`*^9, 
  3.9502536910342903`*^9}, {3.9502538010480156`*^9, 3.950253836147053*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"64c94f77-be25-9848-b7fb-fd2f94bfddcc"],

Cell[BoxData[
 RowBox[{"QuickSort", "[", 
  RowBox[{"{", 
   RowBox[{
   "4", ",", " ", "2", ",", " ", "1", ",", " ", "5", ",", " ", "4", ",", " ", 
    "7", ",", " ", "8", ",", " ", "3", ",", " ", "65", ",", " ", "2", ",", 
    " ", "3", ",", "6", ",", " ", "32", ",", " ", "6", ",", " ", "29", ",", 
    " ", "23"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.950253701499769*^9, 3.9502537408640175`*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"ea6fd15e-13e4-e245-9629-2bc48a8c9f18"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"{", 
   RowBox[{
   "1", ",", "2", ",", "2", ",", "3", ",", "3", ",", "4", ",", "4", ",", "5", 
    ",", "6", ",", "6", ",", "7", ",", "8", ",", "23", ",", "29", ",", "32", 
    ",", "65"}], "}"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"seznam", " ", "=", " ", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomInteger", "[", "100", "]"}], ",", " ", "100"}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.950253891730112*^9, 3.9502540052242985`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"4e83b140-35a8-c142-90f2-57c12059679b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "2", ",", "3", ",", "3", ",", "4", ",", "4", ",", "5", 
   ",", "6", ",", "6", ",", "7", ",", "8", ",", "23", ",", "29", ",", "32", 
   ",", "65"}], "}"}]], "Output",
 CellChangeTimes->{3.950253952027622*^9, 3.9502540067521095`*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"5e9b0bf6-0f47-464d-bb8f-6e75563000d3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "22", ",", "61", ",", "51", ",", "36", ",", "75", ",", "62", ",", "35", ",",
    "62", ",", "29", ",", "72", ",", "47", ",", "43", ",", "66", ",", "27", 
   ",", "82", ",", "71", ",", "45", ",", "24", ",", "38", ",", "33", ",", 
   "69", ",", "60", ",", "81", ",", "62", ",", "97", ",", "69", ",", "72", 
   ",", "47", ",", "48", ",", "23", ",", "14", ",", "19", ",", "83", ",", 
   "31", ",", "9", ",", "55", ",", "24", ",", "52", ",", "64", ",", "91", ",",
    "56", ",", "6", ",", "83", ",", "29", ",", "12", ",", "90", ",", "15", 
   ",", "50", ",", "1", ",", "29", ",", "51", ",", "73", ",", "37", ",", "86",
    ",", "54", ",", "1", ",", "60", ",", "52", ",", "55", ",", "55", ",", 
   "70", ",", "92", ",", "50", ",", "25", ",", "58", ",", "88", ",", "26", 
   ",", "71", ",", "38", ",", "36", ",", "33", ",", "48", ",", "60", ",", 
   "81", ",", "19", ",", "2", ",", "73", ",", "24", ",", "26", ",", "20", ",",
    "52", ",", "40", ",", "17", ",", "19", ",", "96", ",", "27", ",", "12", 
   ",", "39", ",", "97", ",", "85", ",", "38", ",", "20", ",", "71", ",", 
   "78", ",", "90", ",", "89", ",", "56", ",", "39", ",", "22", ",", "29"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.950253952027622*^9, 3.9502540067653904`*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"83e64997-4c4b-3241-b9bc-809781018344"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"QuickSort", "[", "seznam", "]"}]], "Input",
 CellChangeTimes->{{3.9502540121899605`*^9, 3.9502540168842354`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"5d41300c-1383-854e-86c6-036ac0054233"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "2", ",", "6", ",", "9", ",", "12", ",", "12", ",", 
   "14", ",", "15", ",", "17", ",", "19", ",", "19", ",", "19", ",", "20", 
   ",", "20", ",", "22", ",", "22", ",", "23", ",", "24", ",", "24", ",", 
   "24", ",", "25", ",", "26", ",", "26", ",", "27", ",", "27", ",", "29", 
   ",", "29", ",", "29", ",", "29", ",", "31", ",", "33", ",", "33", ",", 
   "35", ",", "36", ",", "36", ",", "37", ",", "38", ",", "38", ",", "38", 
   ",", "39", ",", "39", ",", "40", ",", "43", ",", "45", ",", "47", ",", 
   "47", ",", "48", ",", "48", ",", "50", ",", "50", ",", "51", ",", "51", 
   ",", "52", ",", "52", ",", "52", ",", "54", ",", "55", ",", "55", ",", 
   "55", ",", "56", ",", "56", ",", "58", ",", "60", ",", "60", ",", "60", 
   ",", "61", ",", "62", ",", "62", ",", "62", ",", "64", ",", "66", ",", 
   "69", ",", "69", ",", "70", ",", "71", ",", "71", ",", "71", ",", "72", 
   ",", "72", ",", "73", ",", "73", ",", "75", ",", "78", ",", "81", ",", 
   "81", ",", "82", ",", "83", ",", "83", ",", "85", ",", "86", ",", "88", 
   ",", "89", ",", "90", ",", "90", ",", "91", ",", "92", ",", "96", ",", 
   "97", ",", "97"}], "}"}]], "Output",
 CellChangeTimes->{3.9502540179209995`*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"26893b12-bd57-4647-9c93-1b2103da3db1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"QuickSort", "[", 
  RowBox[{"RandomInteger", "[", 
   RowBox[{"100", ",", " ", "100"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.950254062722864*^9, 3.9502540774140663`*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"be65f664-d698-8e40-9e7d-ab8e31604af6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "0", ",", "0", ",", "0", ",", "3", ",", "4", ",", "4", ",", "5", 
   ",", "5", ",", "7", ",", "11", ",", "11", ",", "11", ",", "12", ",", "13", 
   ",", "14", ",", "15", ",", "15", ",", "15", ",", "16", ",", "16", ",", 
   "17", ",", "20", ",", "20", ",", "20", ",", "20", ",", "20", ",", "20", 
   ",", "21", ",", "22", ",", "23", ",", "24", ",", "27", ",", "27", ",", 
   "28", ",", "28", ",", "28", ",", "30", ",", "33", ",", "34", ",", "36", 
   ",", "37", ",", "37", ",", "39", ",", "40", ",", "42", ",", "42", ",", 
   "43", ",", "43", ",", "43", ",", "44", ",", "44", ",", "44", ",", "45", 
   ",", "46", ",", "48", ",", "48", ",", "49", ",", "49", ",", "50", ",", 
   "53", ",", "53", ",", "53", ",", "62", ",", "63", ",", "63", ",", "64", 
   ",", "65", ",", "65", ",", "67", ",", "67", ",", "67", ",", "68", ",", 
   "69", ",", "69", ",", "72", ",", "72", ",", "73", ",", "73", ",", "73", 
   ",", "76", ",", "81", ",", "83", ",", "84", ",", "85", ",", "85", ",", 
   "86", ",", "86", ",", "88", ",", "89", ",", "90", ",", "90", ",", "91", 
   ",", "92", ",", "92", ",", "94", ",", "95", ",", "97", ",", "98", ",", 
   "99"}], "}"}]], "Output",
 CellChangeTimes->{3.9502540790708065`*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"ca7f5d1c-0991-6040-ad02-7fb3e2bbfefc"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Naloga  1", "Section",
 CellChangeTimes->{{3.9193115847112703`*^9, 3.919311588018684*^9}, {
  3.919322085644229*^9, 3.919322085750065*^9}, {3.9199963850795383`*^9, 
  3.919996385205815*^9}, {3.950251616931161*^9, 
  3.950251618234079*^9}},ExpressionUUID->"95ae1cb0-793f-4738-ba37-\
8495cb33ccee"],

Cell["\<\
Napi\[SHacek]ite prepisovalno pravilo, ki bo izra\[CHacek]unalo produkt dve\
\[CHacek]lenika z dvo\[CHacek]lenikom. S tem pravilom oenostavi izraz (2x - \
4)(3 - 4y).\
\>", "Text",
 CellChangeTimes->{{3.919311592160357*^9, 3.919311612870406*^9}, {
  3.919312379097327*^9, 3.919312401350188*^9}, {3.91931294746025*^9, 
  3.919313029345149*^9}},ExpressionUUID->"f1e0cfbd-acf5-4bb7-9ea9-\
c95a6e8e3c22"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"pravilo", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"a_", " ", "+", " ", "b_"}], ")"}], " ", "*", " ", 
        RowBox[{"(", 
         RowBox[{"c_", " ", "+", " ", "d_"}], ")"}]}], "\[RuleDelayed]", " ", 
       RowBox[{
        RowBox[{"a", " ", "*", " ", "c"}], " ", "+", " ", 
        RowBox[{"a", "*", "d"}], " ", "+", " ", 
        RowBox[{"b", "*", "c"}], " ", "+", " ", 
        RowBox[{"b", " ", "*", " ", "d"}]}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.9502545759193974`*^9, 3.9502545795943394`*^9}, {
  3.95025462167704*^9, 3.9502546232376995`*^9}, {3.9502547585537663`*^9, 
  3.950254917962303*^9}, {3.9502550729171867`*^9, 3.9502551348873177`*^9}, {
  3.950255165831791*^9, 
  3.950255166348295*^9}},ExpressionUUID->"8e5998df-b940-5749-b68a-\
28d4a84269ca"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a_", " ", 
    RowBox[{"(", 
     RowBox[{"b_", "+", "c_"}], ")"}]}], "\[Rule]", 
   RowBox[{
    RowBox[{"a", " ", "b"}], "+", 
    RowBox[{"a", " ", "c"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.950255137146654*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"039ef733-93bb-764e-b646-5c5a69cd6bb2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"2", "x"}], "-", "4"}], ")"}], 
   RowBox[{"(", 
    RowBox[{"3", "-", 
     RowBox[{"4", "y"}]}], ")"}]}], "/.", "pravilo", " "}]], "Input",
 CellChangeTimes->{{3.950254145996155*^9, 3.950254170836529*^9}, {
   3.9502546057744007`*^9, 3.9502546151432247`*^9}, {3.9502546561847267`*^9, 
   3.95025466714538*^9}, 3.9502549257825794`*^9, {3.950254956865711*^9, 
   3.9502550036436195`*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"ca05e76f-3082-e641-9ab8-f7f1c5fb61a6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "12"}], "+", 
  RowBox[{"6", " ", "x"}], "+", 
  RowBox[{"16", " ", "y"}], "-", 
  RowBox[{"8", " ", "x", " ", "y"}]}]], "Output",
 CellChangeTimes->{
  3.9502549282931404`*^9, {3.95025496318602*^9, 3.950254986564991*^9}, 
   3.95025504980966*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"74a46146-4ede-3245-82d0-99b98b9e2787"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"distr", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a_", "*", 
      RowBox[{"(", 
       RowBox[{"b_", " ", "+", " ", "c_"}], ")"}]}], " ", ":>", " ", 
     RowBox[{
      RowBox[{"a", " ", "*", " ", "b"}], " ", "+", " ", 
      RowBox[{"a", " ", "*", " ", "c"}]}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"2", "x"}], " ", "-", " ", "4"}], ")"}], 
   RowBox[{"(", 
    RowBox[{"3", " ", "-", " ", 
     RowBox[{"4", "y"}]}], ")"}]}], " ", "//.", " ", "distr"}]}], "Input",
 CellLabel->"In[22]:=",ExpressionUUID->"7ff53595-b3be-c54f-8dc7-ae34d632a616"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "12"}], "+", 
  RowBox[{"6", " ", "x"}], "+", 
  RowBox[{"16", " ", "y"}], "-", 
  RowBox[{"8", " ", "x", " ", "y"}]}]], "Output",
 CellChangeTimes->{3.950255170500168*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"aa6574a2-933c-684c-9ca1-8a01e6ec9fec"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Naloga  2", "Section",
 CellChangeTimes->{{3.919998479450718*^9, 3.919998483346959*^9}, {
  3.9199993474254436`*^9, 
  3.919999347501218*^9}},ExpressionUUID->"384fdf7b-7f4e-4c1f-83db-\
1623727d936b"],

Cell["\<\
a) Definiraj funkcijo nakljucnaStevila, ki sprejme naravno \[SHacek]tevilo n \
in vrne seznam naklju\[CHacek]nih celih \[SHacek]tevil med -100 in 100 dol\
\[ZHacek]ine n.
c) S  pomo\[CHacek]jo  prepisovalnih  pravil implementiraj urejanje z mehur\
\[CHacek]ki (Bubble sort).\
\>", "Text",
 CellChangeTimes->{{3.919998486975778*^9, 3.9199985121747828`*^9}, {
  3.919999214043026*^9, 3.919999267100514*^9}, {3.919999568071307*^9, 
  3.919999657012591*^9}, {3.919999807603827*^9, 3.919999808399296*^9}, {
  3.91999992618636*^9, 3.9199999313238564`*^9}, {3.920001035216837*^9, 
  3.920001056370714*^9}},ExpressionUUID->"d09306df-7e16-4e4f-8970-\
02df229e94e1"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.950255173854788*^9, 
  3.9502551752274*^9}},ExpressionUUID->"d1200e08-b32c-3a48-920d-a1d7c5b89b99"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"NakljucnaStevila", "[", "n_", "]"}], ":=", " ", 
  RowBox[{"RandomInteger", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "100"}], ",", " ", "100"}], "}"}], ",", " ", "n"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"NakljucnaStevila", "[", "10", "]"}]}], "Input",
 CellChangeTimes->{{3.95025518091724*^9, 
  3.950255291829935*^9}},ExpressionUUID->"375381fb-6757-5242-bdcf-\
e144324fb44a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"37", ",", 
    RowBox[{"-", "28"}], ",", 
    RowBox[{"-", "8"}], ",", 
    RowBox[{"-", "84"}], ",", "85", ",", 
    RowBox[{"-", "18"}], ",", "30", ",", "39", ",", 
    RowBox[{"-", "59"}], ",", 
    RowBox[{"-", "20"}]}], "}"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.9502554162098866`*^9, 
  3.9502554162109623`*^9}},ExpressionUUID->"2335b8a4-5e29-0444-8c4b-\
79fb7db82d5a"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"prep", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"a___", ",", " ", "b_", ",", " ", "c_", ",", " ", "d___"}], 
       "}"}], "/;", " ", 
      RowBox[{"b", ">", "c"}]}], "->", 
     RowBox[{"{", 
      RowBox[{"a", ",", " ", "c", ",", " ", "b", ",", " ", "d"}], "}"}]}], 
    " ", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NakljucnaStevila", "[", "10", "]"}], "//.", " ", 
  "prep"}]}], "Input",
 CellChangeTimes->{{3.950255357807823*^9, 3.9502554068413925`*^9}, {
  3.9502554873276234`*^9, 3.950255539309744*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"50b28160-abe2-bf4a-8345-3389ef5e5cef"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "98"}], ",", 
   RowBox[{"-", "76"}], ",", 
   RowBox[{"-", "74"}], ",", 
   RowBox[{"-", "65"}], ",", 
   RowBox[{"-", "50"}], ",", 
   RowBox[{"-", "48"}], ",", 
   RowBox[{"-", "36"}], ",", "36", ",", "99", ",", "99"}], "}"}]], "Output",
 CellChangeTimes->{{3.950255534617157*^9, 3.9502555413780403`*^9}},
 CellLabel->"Out[35]=",ExpressionUUID->"dd9389aa-4f90-1f40-af8c-93d3e20fc1c1"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Naloga  3", "Section",
 CellChangeTimes->{{3.91934194817379*^9, 3.919341952499741*^9}, {
  3.9199963863322906`*^9, 3.919996386443137*^9}, {3.919999355571076*^9, 
  3.919999355705921*^9}},ExpressionUUID->"050253b4-28d8-440a-9515-\
c847daabc761"],

Cell["\<\
- Definiraj funkcijo ZadnjaStevka, ki kot argument sprejme naravno \
\[SHacek]tevilo n in vrne zadnjo \[SHacek]tevko \[SHacek]tevila n. \
(ZadnjaStevka(8138719) vrne 9)
- Definiraj funkcijo PrvaStevka, ki kot argument sprejme naravno \
\[SHacek]tevilo n in vrne prvo \[SHacek]tevko \[SHacek]tevila n. \
(PrvaStevka(8138719) vrne 8)
- Definiraj funkcijo Parabola, ki sprejme koeficiente parabole a, b in c in \
nari\[SHacek]e graf parabole ax^2 + bx + c. Graf naj bo narisan tako, da bo \
teme parabole vedno vidno na sliki.\
\>", "Text",
 CellChangeTimes->{{3.919341977707533*^9, 
  3.919342198124765*^9}},ExpressionUUID->"20070092-6fb9-4e4a-8e1a-\
d0a625226068"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Naloga  4", "Section",
 CellChangeTimes->{{3.919342200345504*^9, 3.9193422034770727`*^9}, {
  3.919996388454933*^9, 3.919996388623172*^9}, {3.919999357018867*^9, 
  3.9199993571033077`*^9}},ExpressionUUID->"41d21403-a04a-4f2c-b37b-\
968c7f0ac171"],

Cell["\<\
Definiraj naslednje sezname:
- {1/(2^20), 1/(2^19), ..., 1/2, 1, 2, 4, 8, ..., 2^24}
- {{}, {1}, {2}, {3}, ..., {99}, {99}, {98}, ..., {2}, {1}, {}}
- seznam dol\[ZHacek]ine 100, v katerem je vsak naslednji element za eno \
mesto bolj natan\[CHacek]en pribli\[ZHacek]ek \[SHacek]tevila \[Pi]. ({3, \
3.1, 3.14, ...})\
\>", "Text",
 CellChangeTimes->{{3.9193422082485933`*^9, 
  3.919342476057444*^9}},ExpressionUUID->"dffccb33-fe4d-41fe-a1fd-\
4315b1baf132"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"2", "^", "x"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", 
     RowBox[{"-", "20"}], ",", " ", "24"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9502558742474346`*^9, 3.950255876491886*^9}, {
  3.950255907532034*^9, 3.950255934411928*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"eff2283a-728a-a94c-b23d-c3825eea965a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox["1", "1048576"], ",", 
   FractionBox["1", "524288"], ",", 
   FractionBox["1", "262144"], ",", 
   FractionBox["1", "131072"], ",", 
   FractionBox["1", "65536"], ",", 
   FractionBox["1", "32768"], ",", 
   FractionBox["1", "16384"], ",", 
   FractionBox["1", "8192"], ",", 
   FractionBox["1", "4096"], ",", 
   FractionBox["1", "2048"], ",", 
   FractionBox["1", "1024"], ",", 
   FractionBox["1", "512"], ",", 
   FractionBox["1", "256"], ",", 
   FractionBox["1", "128"], ",", 
   FractionBox["1", "64"], ",", 
   FractionBox["1", "32"], ",", 
   FractionBox["1", "16"], ",", 
   FractionBox["1", "8"], ",", 
   FractionBox["1", "4"], ",", 
   FractionBox["1", "2"], ",", "1", ",", "2", ",", "4", ",", "8", ",", "16", 
   ",", "32", ",", "64", ",", "128", ",", "256", ",", "512", ",", "1024", ",",
    "2048", ",", "4096", ",", "8192", ",", "16384", ",", "32768", ",", 
   "65536", ",", "131072", ",", "262144", ",", "524288", ",", "1048576", ",", 
   "2097152", ",", "4194304", ",", "8388608", ",", "16777216"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.950255935722746*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"0684eadd-6104-6f49-97d9-426e9f138b50"]
}, Open  ]],

Cell[BoxData["T"], "Input",
 CellChangeTimes->{
  3.9502559881595383`*^9},ExpressionUUID->"78d1c72f-317a-d448-bf93-\
eb2855a648de"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Naloga  5", "Section",
 CellChangeTimes->{{3.9193425282015543`*^9, 3.919342531850402*^9}, {
  3.919996390690339*^9, 3.91999639079408*^9}, {3.919999359232737*^9, 
  3.919999359320265*^9}},ExpressionUUID->"37655d52-a1b3-4408-9591-\
8b0a22cc0d5c"],

Cell["\<\
Definiraj funkcijo, ki je za pozitivne x enaka sin(x)/x, za x manj\[SHacek]i \
ali enak 0 pa je enaka cos(x). Pomagaj si s funkcijo `Piecewise`.\
\>", "Text",
 CellChangeTimes->{{3.919342737164658*^9, 3.919342837387774*^9}, 
   3.9193436257895737`*^9},ExpressionUUID->"cb1e7497-e2fe-4b4d-8a91-\
1c5b2901b537"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9502562777554054`*^9, 
  3.950256278658844*^9}},ExpressionUUID->"8879c16d-1f8f-6241-b2de-\
63b758357a2b"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", " ", 
  RowBox[{"Piecewise", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"Sin", "[", "x", "]"}], "/", "x"}], ",", " ", 
       RowBox[{"x", ">", "0"}]}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cos", "[", "x", "]"}], ",", " ", 
       RowBox[{"x", "<=", " ", "0"}]}], "}"}]}], "}"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"f", "[", "x", "]"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", 
     RowBox[{"-", "6"}], ",", " ", "6"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.950256079579998*^9, 3.950256081317276*^9}, {
  3.950256133759611*^9, 3.950256271029745*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"140e85cc-5be1-9f43-8a8e-8ef99572cf92"],

Cell[BoxData[
 GraphicsBox[
  InterpretationBox[{
    TagBox[{{{}, {}, 
       TagBox[
        {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[2], 
         Opacity[1.], LineBox[CompressedData["
1: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
/w856cCy
          "]], LineBox[CompressedData["
1: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
N2xDFj72NI6en2cCHdC/ZLw9E/8PQQwbsQ==
          "]]},
        Annotation[#, "Charting`Private`Tag#1"]& ], {}}, {}},
     {"WolframDynamicHighlight", <|
      "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
    StyleBox[
     DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
       Slot["HighlightElements"], 
       Slot["LayoutOptions"], 
       Slot["Meta"], 
       Charting`HighlightActionFunction["DynamicHighlight", {{{{}, {}, 
           Annotation[{
             Directive[
              Opacity[1.], 
              RGBColor[0.368417, 0.506779, 0.709798], 
              AbsoluteThickness[2]], 
             Line[CompressedData["
1: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
/w856cCy
              "]], 
             Line[CompressedData["
1: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
N2xDFj72NI6en2cCHdC/ZLw9E/8PQQwbsQ==
              "]]}, "Charting`Private`Tag#1"], {}}}, {}}, <|
        "HighlightElements" -> <|
          "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
         "LayoutOptions" -> <|
          "PanelPlotLayout" -> <||>, 
           "PlotRange" -> {{-6, 6}, {-0.999998724135768, 0.9999975596123655}},
            "Frame" -> {{False, False}, {False, False}}, 
           "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
           "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
           GoldenRatio^(-1), "DefaultStyle" -> {
             Directive[
              Opacity[1.], 
              RGBColor[0.368417, 0.506779, 0.709798], 
              AbsoluteThickness[2]]}, 
           "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
               Identity[
                Part[#, 1]], 
               Identity[
                Part[#, 2]]}& ), 
             "ScalingFunctions" -> {{Identity, Identity}, {
               Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
           False|>, 
         "Meta" -> <|
          "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
           Plot, "GroupHighlight" -> False|>|>]]& )[<|
       "HighlightElements" -> <|
         "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
        "LayoutOptions" -> <|
         "PanelPlotLayout" -> <||>, 
          "PlotRange" -> {{-6, 6}, {-0.999998724135768, 0.9999975596123655}}, 
          "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0},
           "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
          "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
          "DefaultStyle" -> {
            Directive[
             Opacity[1.], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[2]]}, 
          "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
              Identity[
               Part[#, 1]], 
              Identity[
               Part[#, 2]]}& ), 
            "ScalingFunctions" -> {{Identity, Identity}, {
              Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>,
         "Meta" -> <|
         "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
          Plot, "GroupHighlight" -> False|>|>],
      ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
       4.503599627370496*^15, -4.503599627370496*^15}}],
     Selectable->False]},
   Annotation[{{{{}, {}, 
       Annotation[{
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2]], 
         Line[CompressedData["
1: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
/w856cCy
          "]], 
         Line[CompressedData["
1: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
N2xDFj72NI6en2cCHdC/ZLw9E/8PQQwbsQ==
          "]]}, "Charting`Private`Tag#1"], {}}}, {}}, <|
    "HighlightElements" -> <|
      "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
     "LayoutOptions" -> <|
      "PanelPlotLayout" -> <||>, 
       "PlotRange" -> {{-6, 6}, {-0.999998724135768, 0.9999975596123655}}, 
       "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0}, 
       "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
       "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), "DefaultStyle" -> {
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2]]}, 
       "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), 
         "ScalingFunctions" -> {{Identity, Identity}, {Identity, Identity}}|>,
        "Primitives" -> {}, "GCFlag" -> False|>, 
     "Meta" -> <|
      "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
       Plot, "GroupHighlight" -> False|>|>, "DynamicHighlight"]],
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-6, 6}, {-0.999998724135768, 0.9999975596123655}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.950256246973324*^9, 3.950256272929306*^9}},
 CellLabel->"Out[40]=",ExpressionUUID->"cae29a12-b95e-b048-8d3a-c923814b749e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Naloga  6", "Section",
 CellChangeTimes->{{3.919343206074123*^9, 3.919343210538501*^9}, {
  3.919996392554139*^9, 3.919996392630918*^9}, {3.9199993608245897`*^9, 
  3.919999360891149*^9}},ExpressionUUID->"9059f268-88ed-46fa-9f80-\
f2f54b64459f"],

Cell[TextData[{
 "Dano je zaporedje ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{
         SubscriptBox[
          StyleBox["a", "TI"], 
          StyleBox["n", "TI"]], "\[LongEqual]", 
         SuperscriptBox[
          RowBox[{"(", 
            FractionBox[
             RowBox[{"2", 
               SuperscriptBox[
                StyleBox["n", "TI"], "2"], "+", 
               StyleBox["n", "TI"], "+", "1"}], 
             RowBox[{"2", 
               SuperscriptBox[
                StyleBox["n", "TI"], "2"], "-", "1"}]], ")"}], 
          RowBox[{"-", 
            SuperscriptBox[
             StyleBox["n", "TI"], "2"]}]]}], TraditionalForm], "errors" -> {},
      "input" -> "a_n = \\left(\\frac{2n^2 + n + 1}{2n^2 -1}\\right)^{-n^2}", 
     "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "594129f0-c98f-46f6-8fda-03b3f0a3e99d"],
 " \na) V Mathematici definiraj zaporedje ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       SubscriptBox[
        StyleBox["a", "TI"], 
        StyleBox["n", "TI"]], TraditionalForm], "errors" -> {}, "input" -> 
     "a_n", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "abee8282-ff23-448d-88ea-f19ba337d9e3"],
 ".\nb) Definiraj seznam, ki vrne prvih 30 \[CHacek]lenov zaporedja.\nc) Izra\
\[CHacek]unaj limito zaporedja ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       SubscriptBox[
        StyleBox["a", "TI"], 
        StyleBox["n", "TI"]], TraditionalForm], "errors" -> {}, "input" -> 
     "a_n", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "30f77c83-7df0-4cae-bb0a-2ad9b9fbf36d"],
 ". Izra\[CHacek]unaj tudi limito zaporedja ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RadicalBox[
        SubscriptBox[
         StyleBox["a", "TI"], 
         StyleBox["n", "TI"]], 
        StyleBox["n", "TI"]], TraditionalForm], "errors" -> {}, "input" -> 
     "\\sqrt[n]{a_n}", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "a03e5312-df32-49f8-8b1c-de22f5591754"],
 ". Ali vrsta ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{
         SubsuperscriptBox["\[CapitalSigma]", 
          RowBox[{
            StyleBox["n", "TI"], "\[LongEqual]", "1"}], "\[Infinity]"], 
         SubscriptBox[
          StyleBox["a", "TI"], 
          StyleBox["n", "TI"]]}], TraditionalForm], "errors" -> {}, "input" -> 
     "\\Sigma_{n=1}^\\infty a_n", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "091052dd-b976-4e9a-a8d1-cc8d42ea3afd"],
 " konvergira?\nd) Izra\[CHacek]unaj numeri\[CHacek]ni pribli\[ZHacek]ek \
vsote vrste ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{
         SubsuperscriptBox["\[CapitalSigma]", 
          RowBox[{
            StyleBox["n", "TI"], "\[LongEqual]", "1"}], "\[Infinity]"], 
         SubscriptBox[
          StyleBox["a", "TI"], 
          StyleBox["n", "TI"]]}], TraditionalForm], "errors" -> {}, "input" -> 
     "\\Sigma_{n=1}^\\infty a_n", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "4c4a2a9d-9814-4bb9-a5d5-450d640fb1e1"],
 " (uporabi NSum)."
}], "Text",
 CellChangeTimes->{{3.919343217215786*^9, 3.919343244079322*^9}, {
  3.9193432929934053`*^9, 
  3.919343598416095*^9}},ExpressionUUID->"09c2cc28-ce83-4e5a-ae08-\
b7e193d44db1"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9502567070136395`*^9, 3.950256748106653*^9}, 
   3.950257063772648*^9},ExpressionUUID->"a95f2a42-05a5-4142-9c83-\
4dbecc7d4edd"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"ClearAll", "[", 
  RowBox[{"a", ",", " ", "n"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"a", "[", "n_", "]"}], " ", ":=", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"2", 
         RowBox[{"n", "^", "2"}]}], " ", "+", " ", "n", " ", "+", " ", "1"}], 
       ")"}], " ", "/", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"2", 
         RowBox[{"n", "^", "2"}]}], "-", "1"}], ")"}]}], ")"}], "^", 
    RowBox[{"(", " ", 
     RowBox[{"-", 
      RowBox[{"n", "^", "2"}]}], ")"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"prvih30", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"a", "[", "i", "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"i", ",", " ", "1", ",", " ", "30"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"N", " ", "/@", " ", 
  RowBox[{
  "Sin", " ", "/@", " ", "prvih30"}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.9502570417216377`*^9, 3.950257065986912*^9}, {
  3.9502571161684074`*^9, 3.9502571556182327`*^9}},
 CellLabel->"In[75]:=",ExpressionUUID->"ff898175-53bc-5042-be47-2b3b46c72ef4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.24740395925452294`", ",", "0.16325747494167214`", ",", 
   "0.09807030780304196`", ",", "0.058926122340361285`", ",", 
   "0.03549033617577124`", ",", "0.02141371760511278`", ",", 
   "0.012936460506102749`", ",", "0.00782199284684585`", ",", 
   "0.004732494718300608`", ",", "0.002864583705677368`", ",", 
   "0.0017345316258550987`", ",", "0.0010505523154495408`", ",", 
   "0.0006364189315692703`", ",", "0.0003856028460583055`", ",", 
   "0.0002336659689938886`", ",", "0.0001416114572892015`", ",", 
   "0.00008583036048341217`", ",", "0.00005202555806804929`", ",", 
   "0.000031537027580417286`", ",", "0.00001911828263878458`", ",", 
   "0.000011590382540006378`", ",", "7.0269147589752746`*^-6", ",", 
   "4.260370197457167`*^-6", ",", "2.5831154258310666`*^-6", ",", 
   "1.5662190179428501`*^-6", ",", "9.49668436788925`*^-7", ",", 
   "5.758391255723046`*^-7", ",", "3.4917165293103813`*^-7", ",", 
   "2.1173105217477147`*^-7", ",", "1.283917562284661`*^-7"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.950257137477913*^9, 3.950257159353527*^9}},
 CellLabel->"Out[78]=",ExpressionUUID->"1421eb22-dccf-574f-bf28-589d304cc1c3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   RowBox[{"a", "[", "n", "]"}], ",", " ", 
   RowBox[{"n", " ", "->", " ", "Infinity"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.950257168684189*^9, 3.950257179693012*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"7c1b4b17-3bd8-5643-afe0-ffbf27c35dde"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.9502571810821133`*^9},
 CellLabel->"Out[79]=",ExpressionUUID->"fa300386-60a7-0844-8b8b-7afb6958a91d"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   RowBox[{"Power", "[", 
    RowBox[{
     RowBox[{"a", "[", "n", "]"}], ",", " ", 
     RowBox[{"1", "/", "n"}]}], "]"}], ",", " ", 
   RowBox[{"n", "->", "Infinity"}]}], " ", "]"}]], "Input",
 CellChangeTimes->{{3.950257184325739*^9, 3.950257292956791*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"58e4ace6-8f73-084c-af0c-9edb746d84f5"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  FractionBox["1", 
   SqrtBox["\[ExponentialE]"]], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"Konvergira", ",", " ", 
    RowBox[{
    "ker", " ", "je", " ", "po", " ", "korenskem", " ", "kriteriju", " ", 
     "manj", " ", "kot", " ", "1."}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"NSum", "[", 
  RowBox[{
   RowBox[{"a", "[", "n", "]"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"n", ",", " ", "1", ",", " ", "Infinity"}], "}"}]}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.9502574132658195`*^9, 3.950257524904751*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"49b0ec96-790b-3940-9473-356d35127199"],

Cell[BoxData[
 FractionBox["1", 
  SqrtBox["\[ExponentialE]"]]], "Output",
 CellChangeTimes->{3.950257526346863*^9},
 CellLabel->"Out[82]=",ExpressionUUID->"84d97303-c1e1-d845-a804-4863d35a4af9"],

Cell[BoxData["0.6608494774297689`"], "Output",
 CellChangeTimes->{3.9502575265650215`*^9},
 CellLabel->"Out[83]=",ExpressionUUID->"03984059-ac98-2643-be17-419fd1885e36"]
}, Open  ]],

Cell[CellGroupData[{

Cell["int (arctan(x))dx", "WolframAlphaLong",
 CellChangeTimes->{{3.950256481313692*^9, 3.9502565216113224`*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"18edfa26-d89d-6a40-bc27-7815f146fc46"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "int (arctan(x))dx", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "100", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[ArcTan[x], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   TagBox[
                    TagBox[
                    RowBox[{
                    SuperscriptBox["tan", 
                    RowBox[{"-", "1"}]], "(", "x", ")"}], Identity], 
                    PrecedenceForm[#, 670.]& ], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{
                    RowBox[{"x", " ", 
                    RowBox[{
                    SuperscriptBox["tan", 
                    RowBox[{"-", "1"}]], "(", "x", ")"}]}], "-", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "1"}], ")"}]}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontSize -> Inherited, 
                    FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement[
       "info", {"text" -> "tan^(-1)(x) is the inverse tangent function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/ArcTan.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/ArcTan", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/InverseTangent.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Plots of the integral", "scanner" -> "Integral", "id" -> 
     "Plot", "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot[x ArcTan[x] - Log[1 + x^2]/2, {x, -1.7, 1.7}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max1554$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min1553$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1553$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1554$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2584734$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min1553$\
2584735$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max1554$2584736$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max1554$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min1553$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2584734$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1553$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1553$\
2584735$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1554$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max1554$\
2584736$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$2584714[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], 
                    HoldAll][$CellContext`x ArcTan[$CellContext`x] + 
                    Rational[-1, 2] 
                    Log[1 + $CellContext`x^2], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1553$$], 
                    (
                    Piecewise[{{
                    0. + 1.8249739136681515` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.8249739136681515` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min1553$$], \
-1.7071067811865475`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1553$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max1554$$]], 
                    (
                    Piecewise[{{
                    0. + 1.8249739136681515` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.8249739136681515` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min1553$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max1554$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1553$$ + 
                    0.003414213562373095, 
                    CalculateUtilities`GraphicsUtilities`Private`max1554$$]], 
                    1.7071067811865475`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Full, Automatic}, LabelStyle -> {}, Ticks -> 
                    Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min1553$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max1554$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, $CellContext`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$2584714]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2584714[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2584714[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVtuO0zAQbSn3O/wBEs9IlCJ4QQK6y7LSAiUp7/\
Umk8TCtYPt7IWfB4/dJM22WymmC2iVPozqSXM8c+\
bMdJ4ciiDp93o9ddWYj4LFyQ08PTZmLOa5KHi8e5JLUIoKnlzBZ7eNCUHvACOnEDvfdWM+\
CDkn2p3f4PuERQUjGr5pyqimoGZ7kuQZjVTtmUh6ZH4yYyIijP6Ep8OXr0evhiMHg7FMiNYguXrRFj\
LPJFGQ9BDomjHvGeHf3fFRefxcMBbCjwJ4BOqB8U4liQ2M4IRhPt63Xm6m7mJimvCYyPjCabLyHLe9\
QGlJeTqFeY5vnE/W87bARKbKcXOv5GaTglz4N/GBCG1MzmOTtmdLoF8Yl4y+s7L659wN8Py2LbwUx+\
uJw/zeMeSNaHoEapXOZ63r5BiputZGv+DqoubLVoM8f8rU/0sHVOnVMIZtw4D5oanxeu2two/\
awoscu34h7vvGfHGOEnDdcKgE90nEBVtE0Ux54CTaPl2VG4fDuFPxHaLTp4IVTmDiLPvF9sfDCrzeF\
EKs3WwL0uH1DAggB+OKLbc7NKV6nBFJIgO8uK5fNtlU1KF43Nm+\
9pTH1AwwR8im5QnNfrJUd6Kj7OsfFbeSy5kmQ973uYYU5EbR38L6SEMuj6fCM5IQL2jq1ZvDKqkJkd\
6yH5QgYU44RUj6y3zsN/dwuRJI1Z5EdUnH4sCW5sQ/\
iX5Z4APgqc6aO7bn6PJuW8wmEMe16gKaJMvTZntM95tMN25oDnRfEnxL4j/Qu02h2xT+\
6qawsgd3a0K3JnRrQrcmdGvC/7sm2IjxX+k3RkK4ng=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot[x ArcTan[x] - Log[1 + x^2]/2, {x, -10., 10.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max1556$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min1555$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1555$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1556$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2584827$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min1555$\
2584828$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max1556$2584829$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max1556$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min1555$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2584827$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1555$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1555$\
2584828$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1556$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max1556$\
2584829$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$2584807[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], 
                    HoldAll][$CellContext`x ArcTan[$CellContext`x] + 
                    Rational[-1, 2] 
                    Log[1 + $CellContext`x^2], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1555$$], 
                    (
                    Piecewise[{{
                    0. + 10.94984348200891 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    10.94984348200891 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min1555$$], \
-10.242640687119286`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1555$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max1556$$]], 
                    (
                    Piecewise[{{
                    0. + 10.94984348200891 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 10.94984348200891 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min1555$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max1556$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1555$$ + 
                    0.02048528137423857, 
                    CalculateUtilities`GraphicsUtilities`Private`max1556$$]], 
                    10.242640687119286`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Full, Automatic}, LabelStyle -> {}, Ticks -> 
                    Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min1555$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max1556$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$2584807]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2584807[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2584807[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMtDHEviABHYxJA0pSvvcWO42Fawfb2QZ/Hnx2kzRrVymmAzSlH071pXl899xz13tyJKO03+\
v19FVrPkhO0ht4emzNUM5yWQjy7jRXVGsmRXoFn922JqZmj3L4QYn3XbfmvVQzMP78Ct8HnhQcDP1q\
GGeGUT3ZV5BnLNG1Z6TYsf3JhMsEOPtJn26/\
2N3Z3XrpYTCWERhDldDP20LmmQJN0x4CXbPmLQfxzR8flcdPBecx/V5QkVD9wHrHCoiFkQI45hN86+\
Vm6i4mZkAQUOTCaXLyHLa9QBvFxHRMZzm+cT5ZW22BQU215+Zeyc06Bfnwb+\
IDGbuYvMcl7c6OwLAwLhl9Z2X1z7kb4Pl1W3glT1YTh/\
m94cgbGHZM9TKdz1rXyTNSda2Lfs7VRc2XjQZ5/pSp/\
5cOmTbLYWy3DYPOjmyNV2tvGX6nLbzMsevn4r5vzWfvKAFXDYdKcB8lKfg8imbKAy/\
R9unq3Do8xp2K7xidIRWscCIbZ9kvrj8eVuD1phBj7SYbkI6oZ0BEc2pdxHG7x6bMDDNQkFjg+\
XX9ssnGsg4l4M72tWeCMDvAPCHrlic0B+lC3cEk2Zc/Km4llzNNhrwfCEOnVK0V/\
S2sj7LkCjKWgZHEeEFTr8EcVkmNQAXLflCCxDkIhpDsl/24b/\
7hYiWQqn2F6lKexYErzWl4Ev2ywIdUTE3W3LEDR1dw22I2kTypVRexNF2cNptjut9kunFDc6CHkhBa\
kvCB3m0K3abwVzeFpT24WxO6NaFbE7o1oVsT/t81wUWM/0q/AbOiuLY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Reduced logarithmic form", "scanner" -> "Integral", 
     "id" -> "LogReduce", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Simplify[x ArcTan[x] - Log[1 + x^2]/2, True]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 TagBox[
                  RowBox[{
                    FractionBox["1", "2"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "x", " ", 
                    RowBox[{
                    SuperscriptBox["tan", 
                    RowBox[{"-", "1"}]], "(", "x", ")"}]}], "-", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "+", 
                    SuperscriptBox["x", "2"]}], ")"}]}], ")"}]}], HoldForm], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontSize -> Inherited, 
                  FontFamily -> "Roboto", 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "LogReduce__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"title" -> "Alternate form of the integral", "scanner" -> 
     "Integral", "id" -> "AlternateFormOfTheIntegral", "position" -> "400", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"TrigToExp[x ArcTan[x] - Log[1 + x^2]/2]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 RowBox[{
                   RowBox[{"-", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "1"}], ")"}]}]}], "+", 
                   RowBox[{
                    FractionBox["1", "2"], " ", "\[ImaginaryI]", " ", "x", 
                    " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}]}], ")"}]}], "-", 
                   RowBox[{
                    FractionBox["1", "2"], " ", "\[ImaginaryI]", " ", "x", 
                    " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "+", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}]}], ")"}]}]}], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontSize -> Inherited, 
                  FontFamily -> "Roboto", 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at x = 0", "scanner" -> 
     "Series", "id" -> "SeriesExpansionOfTheIntegralAtx=0", "position" -> 
     "500", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Series[x ArcTan[x] - Log[1 + x^2]/2, {x, 0, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    FractionBox[
                    SuperscriptBox["x", "2"], "2"], "-", 
                    FractionBox[
                    SuperscriptBox["x", "4"], "12"], "+", 
                    FractionBox[
                    SuperscriptBox["x", "6"], "30"], "-", 
                    FractionBox[
                    SuperscriptBox["x", "8"], "56"], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["x", "9"], ")"}], 
                    SeriesData[$CellContext`x, 0, {}, 2, 9, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["1", "2"], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["1", "12"]}], ",", "0", ",", 
                    FractionBox["1", "30"], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["1", "56"]}]}], "}"}], ",", "2", ",", "9", 
                    ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontSize -> 10, FontFamily -> "Roboto", 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at x = -i", "scanner" -> 
     "Series", "id" -> "SeriesExpansionOfTheIntegralAtx=-I", "position" -> 
     "600", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Series[x ArcTan[x] - Log[1 + x^2]/2, {x, -I, 4}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                TemplateBox[{
                  RowBox[{
                    FractionBox["3", "4"], "-", 
                    FractionBox[
                    RowBox[{"arg", "(", 
                    RowBox[{"x", "+", 
                    TagBox["\[ImaginaryI]", HoldForm]}], ")"}], 
                    RowBox[{"2", " ", "\[Pi]"}]]}]}, "Floor"], " ", 
                RowBox[{"(", 
                  TemplateBox[{
                    RowBox[{
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], "-", 
                    RowBox[{"\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{"x", "+", 
                    TagBox["\[ImaginaryI]", HoldForm]}], ")"}]}], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", 
                    TagBox["\[ImaginaryI]", HoldForm]}], ")"}], "4"], ")"}], 
                    SeriesData[$CellContext`x, 
                    Complex[0, -1], {}, 0, 4, 1], Editable -> False]}], 
                    RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", 
                    RowBox[{"-", "\[ImaginaryI]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], ",", 
                    RowBox[{"-", "\[Pi]"}]}], "}"}], ",", "0", ",", "4", ",", 
                    "1"}], "]"}]}, "SeriesData", DisplayFunction -> (#& ), 
                   InterpretationFunction -> (#2& ), SyntaxForm -> Plus], 
                  ")"}]}], "+", 
              RowBox[{"(", 
                TemplateBox[{
                  RowBox[{
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "2"}], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}]}], ")"}]}], "+", 
                    RowBox[{"2", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"x", "+", 
                    TagBox["\[ImaginaryI]", HoldForm]}], ")"}]}], "-", 
                    RowBox[{"4", " ", 
                    RowBox[{"log", "(", "2", ")"}]}], "-", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}]}], ")"}]}], "+", 
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"x", "+", 
                    TagBox["\[ImaginaryI]", HoldForm]}], ")"}]}], "-", 
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"log", "(", "2", ")"}]}], ")"}]}], "+", "\[Pi]"}],
                     ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"x", "+", 
                    TagBox["\[ImaginaryI]", HoldForm]}], ")"}]}], "+", 
                    RowBox[{
                    FractionBox["1", "8"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", 
                    TagBox["\[ImaginaryI]", HoldForm]}], ")"}], "2"]}], "-", 
                    RowBox[{
                    FractionBox["1", "48"], " ", "\[ImaginaryI]", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", 
                    TagBox["\[ImaginaryI]", HoldForm]}], ")"}], "3"]}], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", 
                    TagBox["\[ImaginaryI]", HoldForm]}], ")"}], "4"], ")"}], 
                    SeriesData[$CellContext`x, 
                    Complex[0, -1], {}, 0, 4, 1], Editable -> False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", 
                    RowBox[{"-", "\[ImaginaryI]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "\[Pi]"}], "-", 
                    RowBox[{"4", " ", 
                    RowBox[{"Log", "[", "2", "]"}]}], "-", 
                    RowBox[{"2", " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{"1", "-", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}]}], "]"}]}], "+", 
                    RowBox[{"2", " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{"\[ImaginaryI]", "+", "x"}], "]"}]}]}], ")"}]}], 
                    ",", 
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    RowBox[{"(", 
                    RowBox[{"\[Pi]", "-", 
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"Log", "[", "2", "]"}]}], ")"}]}], "+", 
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{"\[ImaginaryI]", "+", "x"}], "]"}]}]}], ")"}]}], 
                    ",", 
                    FractionBox["1", "8"], ",", 
                    RowBox[{"-", 
                    FractionBox["\[ImaginaryI]", "48"]}]}], "}"}], ",", "0", 
                    ",", "4", ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus], ")"}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput,moutput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "3"}, {
       XMLElement["info", {"text" -> "arg(z) is the complex argument"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Arg.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Arg", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/ComplexArgument.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {"text" -> "floor(x) is the floor function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Floor.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/IntegerFunctions/Floor", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/FloorFunction.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at x = i", "scanner" -> 
     "Series", "id" -> "SeriesExpansionOfTheIntegralAtx=I", "position" -> 
     "700", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Series[x ArcTan[x] - Log[1 + x^2]/2, {x, I, 4}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                TemplateBox[{
                  FractionBox[
                   RowBox[{"\[Pi]", "-", 
                    RowBox[{"2", " ", 
                    RowBox[{"arg", "(", 
                    RowBox[{"x", "-", 
                    TagBox["\[ImaginaryI]", HoldForm]}], ")"}]}]}], 
                   RowBox[{"4", " ", "\[Pi]"}]]}, "Floor"], " ", 
                RowBox[{"(", 
                  TemplateBox[{
                    RowBox[{
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], "+", 
                    RowBox[{"\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{"x", "-", 
                    TagBox["\[ImaginaryI]", HoldForm]}], ")"}]}], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", 
                    TagBox["\[ImaginaryI]", HoldForm]}], ")"}], "4"], ")"}], 
                    SeriesData[$CellContext`x, 
                    Complex[0, 1], {}, 0, 4, 1], Editable -> False]}], 
                    RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "\[ImaginaryI]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], ",", "\[Pi]"}], 
                    "}"}], ",", "0", ",", "4", ",", "1"}], "]"}]}, 
                   "SeriesData", DisplayFunction -> (#& ), 
                   InterpretationFunction -> (#2& ), SyntaxForm -> Plus], 
                  ")"}]}], "+", 
              RowBox[{"(", 
                TemplateBox[{
                  RowBox[{
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "2"}], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{
                    RowBox[{"\[ImaginaryI]", " ", "x"}], "+", "1"}], ")"}]}], 
                    "+", 
                    RowBox[{"2", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"x", "-", 
                    TagBox["\[ImaginaryI]", HoldForm]}], ")"}]}], "-", 
                    RowBox[{"4", " ", 
                    RowBox[{"log", "(", "2", ")"}]}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}]}], ")"}]}], "+", 
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "2"}], " ", "\[ImaginaryI]", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"x", "-", 
                    TagBox["\[ImaginaryI]", HoldForm]}], ")"}]}], "+", 
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"log", "(", "2", ")"}]}], ")"}]}], "+", "\[Pi]"}],
                     ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"x", "-", 
                    TagBox["\[ImaginaryI]", HoldForm]}], ")"}]}], "+", 
                    RowBox[{
                    FractionBox["1", "8"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", 
                    TagBox["\[ImaginaryI]", HoldForm]}], ")"}], "2"]}], "+", 
                    RowBox[{
                    FractionBox["1", "48"], " ", "\[ImaginaryI]", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", 
                    TagBox["\[ImaginaryI]", HoldForm]}], ")"}], "3"]}], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", 
                    TagBox["\[ImaginaryI]", HoldForm]}], ")"}], "4"], ")"}], 
                    SeriesData[$CellContext`x, 
                    Complex[0, 1], {}, 0, 4, 1], Editable -> False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "\[ImaginaryI]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], "-", 
                    RowBox[{"4", " ", 
                    RowBox[{"Log", "[", "2", "]"}]}], "-", 
                    RowBox[{"2", " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{"1", "+", 
                    RowBox[{"\[ImaginaryI]", " ", "x"}]}], "]"}]}], "+", 
                    RowBox[{"2", " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], "+", "x"}], "]"}]}]}], 
                    ")"}]}], ",", 
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    RowBox[{"(", 
                    RowBox[{"\[Pi]", "+", 
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"Log", "[", "2", "]"}]}], ")"}]}], "-", 
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], "+", "x"}], "]"}]}]}], 
                    ")"}]}], ",", 
                    FractionBox["1", "8"], ",", 
                    FractionBox["\[ImaginaryI]", "48"]}], "}"}], ",", "0", 
                    ",", "4", ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus], ")"}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput,moutput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at x = \[Infinity]", 
     "scanner" -> "Series", "id" -> 
     "SeriesExpansionOfTheIntegralAtx=Infinity", "position" -> "800", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[x ArcTan[x] - Log[1 + x^2]/2, {x, Infinity, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    FractionBox[
                    RowBox[{"\[Pi]", " ", "x"}], "2"], "+", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"log", "(", "x", ")"}]}]}], "-", "1"}], ")"}], 
                    "-", 
                    FractionBox["1", 
                    RowBox[{"6", " ", 
                    SuperscriptBox["x", "2"]}]], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "x"], ")"}], "3"], ")"}], 
                    SeriesData[$CellContext`x, 
                    DirectedInfinity[1], {}, -1, 3, 1], Editable -> False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "\[Infinity]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["\[Pi]", "2"], ",", 
                    RowBox[{
                    RowBox[{"-", "1"}], "-", 
                    RowBox[{"Log", "[", "x", "]"}]}], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["1", "6"]}]}], "}"}], ",", 
                    RowBox[{"-", "1"}], ",", "3", ",", "1"}], "]"}]}, 
                 "SeriesData", DisplayFunction -> (#& ), 
                 InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"generalized Puiseux series\"", 
                   "\[NoBreak]", "\")\""}], {
                 FontSize -> 10, FontFamily -> "Roboto", 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod9$$, 
   Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, Typeset`pod13$$, 
   Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, Typeset`pod17$$, 
   Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, Typeset`pod21$$, 
   Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, Typeset`pod25$$, 
   Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, Typeset`pod29$$, 
   Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, Typeset`pod33$$, 
   Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, Typeset`pod37$$, 
   Typeset`pod38$$, Typeset`aux1$$ = {True, False, {False}, True}, 
   Typeset`aux2$$ = {True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {True, False, {False}, True},
    Typeset`aux5$$ = {True, False, {False}, True}, Typeset`aux6$$ = {
   True, False, {False}, True}, Typeset`aux7$$ = {True, False, {False}, True},
    Typeset`aux8$$ = {True, False, {False}, True}, Typeset`aux9$$ = {
   True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`aux35$$ = {
   True, False, {False}, True}, Typeset`aux36$$ = {
   True, False, {False}, True}, Typeset`aux37$$ = {
   True, False, {False}, True}, Typeset`aux38$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "int", "template" -> 
        "Assuming \"int\" is an integral${separator}Use as ${desc} instead", 
        "count" -> "2", "pulldown" -> "false", "default" -> 
        "{\"C\", \"int\"} -> {\"IntegralsWord\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "IntegralsWord", "desc" -> "an integral", "input" -> 
          "{\"C\", \"int\"} -> {\"IntegralsWord\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Function", "desc" -> "a math function", "input" -> 
          "{\"C\", \"int\"} -> {\"Function\"}"}, {}]}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "8", "datatypes" -> "", "timedout" -> "Integral", 
     "timedoutpods" -> "", "timing" -> "3.458", "parsetiming" -> "0.244", 
     "parsetimedout" -> "false", "recalculate" -> 
     "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa10171hg07d9738eeffff00005aii2fa31ec9ha1d1494138648170584556", "id" -> 
     "MSP10181hg07d9738eeffff000014741hi8e948e687", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "9", "related" -> 
     "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa10191hg07d9738eeffff00000ee9gah9320ib3c71494138648170584556", "version" -> 
     "2.6", "inputstring" -> "int (arctan(x))dx"}, {
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "0", "datatypes" -> "", "timedout" -> "Integral", 
     "timedoutpods" -> "", "timing" -> "3.334", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "parseidserver" -> "16", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "16", "related" -> "", 
     "version" -> "2.6", "inputstring" -> "int (arctan(x))dx"}}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2025, 3, 6, 14, 29, 8.336099`8.673537831032498}, "Line" -> 43, 
    "SessionID" -> 22759329155016478688}, Typeset`showpods$$ = {1, 2, 3, 4, 5,
    6, 7, 8}, Typeset`failedpods$$ = {9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 
   19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
    38}, Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "int (arctan(x))dx"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
         Typeset`pod37$$, Typeset`pod38$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
         Typeset`aux37$$, Typeset`aux38$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{824., {1109.068714918605, 1114.359730543605}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
          Typeset`pod37$$, Typeset`pod38$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
          Typeset`aux37$$, Typeset`aux38$$}, Typeset`chosen$$, Typeset`open$$,
          Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa10171hg07d9738eeffff00005aii2fa31ec9ha1d1494138648170584556", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.950256548572876*^9},ExpressionUUID->"4fe334d1-97c3-424f-9d74-\
98a1bc3de4fe"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Ljubljana", "WolframAlphaLong",
 CellChangeTimes->{{3.9502566346965427`*^9, 3.950256637729536*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"3f3a6f81-04cd-4448-a744-d751203f2448"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Ljubljana", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Entity[\"City\", {\"Ljubljana\", \"Osrednjeslovenska\", \
\"Slovenia\"}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              TagBox[
               TagBox["\"Ljubljana\"", 
                $CellContext`TagBoxWrapper[
                "Entity" -> {
                  CityData, {"Ljubljana", "Osrednjeslovenska", "Slovenia"}}]],
                Identity], TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Population", "scanner" -> "Data", "id" -> 
     "Population:CityData", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n   ", 
         XMLElement["microsource", {}, {"CityData"}], "\n   ", 
         XMLElement["microsource", {}, {"USCensusData"}], "\n  "}], 
       XMLElement[
       "minput", {}, {
        "Entity[\"City\", {\"Ljubljana\", \"Osrednjeslovenska\", \
\"Slovenia\"}][EntityProperty[\"City\", \"Population\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   TagBox["\"city population\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  StyleBox[
                   TemplateBox[{
                    StyleBox[
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["287218", #& ], "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"people\"", {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LineIndent -> 0}]}], Identity], #& , SyntaxForm -> Dot], 
                    "Unit", SyntaxForm -> Dot], LineIndent -> 0, 
                    ZeroWidthTimes -> False], "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{
                    
                    TemplateBox[{
                    "\[NoBreak]", "\"\[NoBreak]\"", "\"country rank\"", 
                    "\": \""}, "RowWithSeparators"], 
                    TagBox[
                    SuperscriptBox["1", "\"st\""], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> 
                    RowBox[{"1", "\[InvisibleSpace]", "\"st\""}]]]}, 
                    "RowDefault"], "\[NoBreak]", "\")\""}], {
                    FontSize -> 10, FontFamily -> "Roboto", 
                    GrayLevel[0.5], LineIndent -> 0}]}, "RowDefault"], 
                    LineIndent -> 0], "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{
                    FormBox[
                    TagBox["\"2015\"", Identity], TraditionalForm], 
                    "\" estimate\""}, "RowDefault"], "\[NoBreak]", 
                    "\")\""}], {FontSize -> 10, FontFamily -> "Roboto", 
                    GrayLevel[0.5], LineIndent -> 0}]}, "RowDefault"], 
                   LineIndent -> 0], 
                  LinebreakAdjustments -> {1, 100, 0, 0, 100}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata,\
quantitydata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Show history", "input" -> 
         "Population:CityData__Show history"}, {}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Location", "scanner" -> "Data", "id" -> 
     "Location:CityData", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n   ", 
         XMLElement["microsource", {}, {"AdministrativeDivisionData"}], 
         "\n   ", 
         XMLElement["microsource", {}, {"CityData"}], "\n  "}], 
       XMLElement[
       "minput", {}, {
        "Entity[\"City\", {\"Ljubljana\", \"Osrednjeslovenska\", \
\"Slovenia\"}][EntityProperty[\"City\", \"Position\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TagBox[
              TagBox[
               
               TemplateBox[{",", "\",\"", "\"Ljubljana\""}, 
                "RowWithSeparators"], 
               $CellContext`TagBoxWrapper[
               "Entity" -> {
                 AdministrativeDivisionData, {"Ljubljana", "Slovenia"}}]], 
              Identity], TraditionalForm], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n   ", 
         XMLElement["microsource", {}, {"AdministrativeDivisionData"}], 
         "\n   ", 
         XMLElement["microsource", {}, {"CityData"}], "\n   ", 
         XMLElement["microsource", {}, {"CountryData"}], "\n  "}], 
       XMLElement["datasources", {}, {"\n   ", 
         XMLElement["datasource", {}, {"CIAFactbook"}], "\n  "}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{
              EdgeForm[{
                GrayLevel[0.6], Antialiasing -> False}], 
              GrayLevel[0.93], {}, 
              GraphicsComplexBox[CompressedData["
1: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
91cKeMzzwBKJ//7FFU+qSwrkSjtraRK5Em0XA5XIX6kfduMi9v9taqQtkfmK
1dp/eDeRC7tvHpn5mgIpevHqRWS/Tt9kLzjbkAqslgZPQZ6OLy5zbH4klQ1/
uO/BcyKXtVNJEYlMhefW9EOWJP6/jNTMqsUUuDW7VCZG5F/2cnqsVqRCX+pb
LhnCly88w2vRqSDwIfLPY+KvZ69HUZRvChjaxvV16pL3he+JXdJFqRC9j2Hb
JqI/OGRyWCc2FU4sfw06fYaOVUOqZ5+zpILG3/g8R6JvRBPmaC5MhQmv5hW2
0/8/rza/u2WfCo/S98xtIvIjB7SKJnNT4VcQ3/G+o2Q/tX67oxOdCbcn/5qI
kvxt7Tcx7N2SCkW2u+aDiX63QO1NG1+Sj+PHo8ZEntH69dHk2lQwdwtMfUfk
zbcfDC6YE//bJrjaCafjD1Ndm1R4d05c/x/xj23Nd9Q2pYLTrqIsKyL34JFh
8PRKhcoSKaUKYu9bTI9WxEIKrNz9+vs20f+xpudfimgqMLZ13JAi+i+GVBOu
+6SCHiN2yBHO796954lHKkQIztUfI7zHrYbaYZoKiblGT5bIeSHYIHNkX04q
sK/4+hWdoqMq38W9P0xSoUrZslOT6Fu35b+QfpMCcvtkRUeIXKIl90PYhxTY
tCfr+LIW2c9HtRsGDcm8ttxzeUXslWayG7hNpoDfV54p05PkfPAvlGVSSAUP
2+7stSRei338MqHzybA3PyB3lZy303WLC5bRKcA7sjSyQLjE1Kf+nD/hQOXb
+pp0fBr6+8gGtVQ40zK/dvUEHe3U+prva6ZCyefLF49L1+I9RaZ1/UmFKPL6
5u+nxN+WE4/UlgZSYLrY4PIb8t4/3yajfZXdA5b3j+85QtZ7pXFVbzmZCtxq
Jy58I/qFMqUuA7kpsFUmfIMKYSUxTZ7bLSlwiNk/S+v/8X9WLBOoJ+dTPudh
zl0k32jRP9das+CmCE9Ztxq5/3eLuw6vS4Ezv4V4BnbQce7HGnYjuSxoibJi
sdtEx/l6NeENXNnQf6hziL6NvN9ZPnF+S8mE8Vefq0zIfWqSujyxWuABdrSJ
V7f4yXtg6vuv3auZENmTvF2ZsMoN3s6FoUzwB625BfK9phr6QlE9uhBHY59M
fLEm9Wqv3pQt4QmSDyfL/u0k/fvz1K2ZNwWeXhBmzNxOR0ehF3mMS8nQ//Dk
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
dAUOafWeHHfLAqbq/i57/wqcrgn0W1OaBeqed/1XA6pQgZ7EwphIxf1cah2V
hhW4m8MmdNYyE54Wbu/XO1OBJZ0B5TulMkHQocu5ULECG6wotRH1meC7xUCX
j3AKwy0WtZuZIB82scB8qgr3bq6G3x3kuydIMej2ziqcOH1pMECdhlTjn2sY
ThF7dfZmg8XRYHt+xwLL3goU+sYmoUXqZa9+Y3eJRAWa/L5078XETeBPC282
XC3HW20b5yz2xIIqCK9dXi7HfcaHAwebYmFMctUqe7YcjdrtniynxUDTmvmC
9XWVmLd9pG86noaGV1k0T/RUomb/7x++u+n4R70lgq21EreU/t7CZ0jHYyV6
M6n3y9H20R8b1b54+O/a3UC27nKM+dc/Z/k1Du57VPE2llVi6cjp26sCdHTk
tLD/VleOSX6eUWwz8TDDhUFqFeU4sNwaXuacAJO7b8ADt3J0dd6/XocxE4pf
Nibw+FXimXgnCReZGpxQu91ld7EcR1/yb3mkkwnuxY3Dx8LKUeWZ34iDegK8
E4lbYrxQiaa2Yb+7fOgYHMt/rEK5Evd1zH9m3FWD5uKiQumnKjG2fbt2yS46
3rhp92SNMfH/o8t60+lEOC1xVfmxCeFdah5tjQnQU1we77SrEvub3k7+46OT
OCdaDTdWYpGR1KvLV2vwhZp586p4JSaw5st/96bjuLaemAtXJYqrTVpYtdag
7cD6uD8S5bhwfalon3kieCmFS/57VYZ1+7wkL5ZkgvWDzhxv/nIcPD89nX84
EWZOsfn7favAHVsbOSbV6Xji6tz1918r8LLA7+f//x/9ffRAesCDMuxKOgpT
ixnw4RTTf1NZZXhMxPiCZ2gmKN4pzuoOK8P+BX3f8a8Z4NHAmDUcU4Efe7i0
uo/RMfISq12YVRlGmoouK2/NhMdRE59fXCpDVOZPoXtlguiHGiEnizJcpxH5
3bwmEY4lK1CXt5fhei7bet9bmfDg85Gzxprk3fjdUL8wJhGkVa6WTW0oQwle
7xaVsUxQiFG0l5coQ1s9vl33yPv4P9eAGn+mMnyUk7nZSS0Rsv+pheX3l+Ke
26csPBSyQH+C0ensVClmsmiGT0kkgtSxBRbarVIU7ld5zr8lC36uz1gdTS1F
jdDnuw81ZkLQ/tulC47kne5b+9efMRvunfouSC8pxRefaC1Zxokg0GVveMmy
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
dhLsgivFtt1PI/+dWv4441wSctSO8c49SiLRAg6/zr1OQUX3/pgBo0q0Fky3
3etnAQODjRs0MsmD8Kqm8QVJcD8SIBN/Ponk7gm7dRkseG2erpjgSCf9Sft0
fF1ZCNJ78tHuaA6JGhprL6tj4V4Fz64NTUnE5sGjTS23WYiqFs7ZnpxMBIbq
E7RDWLi98ElpnX4K2fw+dS/NnwWm/4rmKv8U4nf0vOZ6pRRk0wzy5B9V4k3f
wZHJDywcLnzeMlkWQDRl942v82FB5HyA1MylZBKjE1h7z5eFlti2JMWBJHJf
t9Kl2ZCFxVy/B6LWpZDTl2vyww6z8Iv/p/hYewq5YjkgPboqCWWdXd/k3nsj
lPliy9SyJHDzun744usFN9sSW46tLBQ070xooKeQMW5zN70fLKRVN56QzfNG
rHVMZeJXFoRu5QUkwBtTWxsK2nhZWPSf+pX9/1LJi7G/u50WsvDyqny3gmEa
URF4dzfCkYX4T6vUeccDiMwt5dXOYckQqRtbdORJJTiOGLzTKGOhwelaXW62
P7ROnX5u1J6ImSZ3eTEr6p545V+8JJeFY1v0P4mV+qDSNen4BVUWKpoYsaxw
N+yz55PZI8DC8mfrSqr4PKBPW8BO7UrC/Nnh+afMSkxoxEf+ovx7+0Esa9Tf
GzsXj0o9naZ4pzyPhVSPN5bqsntXjyWC/fLtu9FeNzBdw46xWhOhK6t2v++J
Ow5d+3Bc3SoReZtmPLdcCiAW6x9a+rAScPnxnoLUhBxyT6dSFexERLPuhN9s
9cLN/7KOM9cmot8h1W3LU3+yBsf/Dp1OBGtJ9NVttV44trROZbw9AekeDxva
Kv3JlO0Khc2iiXjJHC+9XuCGTXFcDtLzCXiyqqpnbtwda/eYH9eISYCVQ8bN
Cm5/crZLXJa3NwEP9PKuN2l7IeZyvvKdVwkY59H5rmnthdsvF21ueJIAkflV
dzpPeOPYe7Z2OxKgbfdXecDLC1ev7yuMqU7Ao9tCyW/LvFDP3NSy9/8yv4HJ
4TdeGFB1LS2sSsCNBSdPykxS/mpaqSTcTcAqMi/c/9YLb45ZJKVScvn+cFnG
lBeMf9wcul+RgIzh6B5+L2/ERRixhSi5qMavOsXdG2b9r/bfKktApJxz7N5U
L0zvM6hbW5SACyev3V593wt84y92BefGQ2kz1+Wz9Bzi/qBk/tQxFjLv9Biv
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
9zmZpU4NEfg09YCrexsVX8ng3oobLtC9Hrkh+wQDz/Y1m+3bEok3S41mRY4y
0Lnp+0LmrgjM/qg1TqDkPKOmJun5SJj++MP56ysdzg88LnB+diIeOQde80kw
MFSHSzvaXeCjd03DUoMBi+7VHxe2RqH920zuSjUGYrWMvu1NjMCVZQGXvN7T
4fp71yyOO5P66rJvw9wMhK5fkVN4yRLPHZymtq1kwPQCPhUvcIXTA7+Yrt0M
yFgelz5WEokDx72WXaby95Hj14H/LKOgV+H6t53q7+UxbLtvE6q4uik8eYCa
LyEWGz+7HIzE2oQJoVgq3oIGI/klgpHYePL9MomPdBTUX8mzmjQlve/L+kWX
MsAV5rA674Mrth7uNWhcwEBuRPsBWrErom50SU3aMRE5M1jlPlKJfd6f+KOo
9zv9jejySRdhz5/Q1jhDx7eVKdmP6W44//iRwIZZOqaVg3fnXvZC0IWd9o7L
KXwfu4x8fhaJOwx5kdExOjQ+npjjVqf4bcuc7KdFDLR5VEtrG0Zj0WnBgIAB
OvbmS3Z9z3fDfPdc1d8UOrz/9e2ogh/ZuEUq72YFHV8iPP8ZJRqTYw7+hiaf
6JjYzic/lxOM7H8L/9v7ig5fXjUJPnk3nIv3VZSj/LvcLeVfvjIaiVbzDRrJ
dPxIHxOQeehM5N5/+vn0HR2XatzVEn8Gw9TH2nxzPh2ZoZvuDxw7S66N1xre
6KHj4ZWdreHVwTD7GTvdT32vtG/rn/qv0XBS4ghfd4eOPohUlQ5fRLpv4ya1
HhpWT6recfmcR5h219LuetMh6sWdNfDClzwemPs6I8mE+pMVGHxTielha69+
av5H6g9OW6ISp819/lg+o+Pw4tTNJ/aG4Mr6YwUvUulIXPLhqJ2CMswjeF13
Uf6qdpSKB22MxS4ac4dgER3/iRlN7PvjiKwvypWGBXTQdrUK7ZZ3xAGh5pZe
YwYen/5Rd7ckHyoxPA3ruuh4V7Dqh7xzLIRG5Fgz8XT8E5eR+9l1HkyZrZw3
gujIan9hryx9lriln2KddqBjq/9Jk+9+LkS5pKby2zImSj1KM4pfV2LqY5t/
Wysdvc4//GYOU3HbdNmkgQ6js40fr92MwXv9bIZUHR2rFL5aukvFwrVCY5Xn
eTrup89/sl3tRoJu5w+PeNBhsb9L8JWIFNyf8snGUfjb9uwyU30egu9Lc79+
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
NePBpTY+WSAdhvb3hUG3nzLhsbTuzHa+MCiWbw4ukYmH2fFVkh7UXrUdtlmn
1lkFgY3jkw4KoZAeUtfbne1JRMUO959TDQHnjQGfwE35pOY575MPt0Pxj0ga
jzrGQ3LxiwB/hRBINH36yUHx3Rfmj5V2M0PxylzULcU8Hm1Ft0dEpkIw3M7B
xbvRkzQ0f30nxx2OH5mXE8YSq2AQvZin0SQUul08C/0ux4MveuH3iFWhEFl6
3f56TCjis0vXBNUFI9SS23utRD45XrfI3801BEEzPlkFPz1IwftTQmJLQ3F2
x4xGWnw8Smdm90ZYB2P901X8Dgr5JN+pV7p8fQiOTrJPbC92J/ri2jwpEiFY
RfuwvFrEndzaWshr7RkC021/+9EeCrfHw4orboRARypurJDKX+Tof/mq/iEI
qC0vzfiPgdKYl9vFroRAv9J+QvJmPG59TuuVNA7BzS95UQPlDNjOWQf+2x+C
Oz3m8Zd9GUjg/MMYWRoCF5OLC0dTQ8HqNfQY3xYCttaLo8IzDHi4nhX5Ts2N
i9qid1ddYWLy4+sU2vIQWJup8CW9ZsBpTHaZ8hJqjlVFSZjqMiGhOFxd9jsY
Hqo3q6pkmeAUfhqr7xSMFvvITbPvXIlsm3ndGnYQzuT5bb+yLp/oLubynBwJ
xkxCcKhsCgNtcndnx94Eo4w37dqpaiYKeyMV6pqDwV32UHWjHx3rnreLPesO
xrlt+3cUHYnHjXO1Xe406nsNdP7IolAssuG7lCwRjKdqAXLZo64kj69qzsiZ
sv9FxP1dOB2c5h7F4cbBKOptExPOoiNsRW7MtY4QMJc8eRhHzZNNs9HSYo+C
cNl/la16khvxTp9s6qJ46+fG02QbVV+31edPqfAF4/XXv9KtM3SUxrpXad4L
QvXidv2/CdQ+rY3zdqoPxm/VmIUf95Xi7OVYd2WTIFjIeOaKH3QjnVvHzSQ7
grCmrqH8WRcdtbaHTL+WB2FXDztuC08YOLX1JD9nBCH4zPhYNDVn+ERWJNkK
BKEzzmyRXLgb8Xs89znpfBAiNrdlBsuHQjJLMuyQdhAEPt0MPjsWgtYRbfG0
q0FIcVa9uNSNjrTah6mNT4Nxv0F527bkKoS9pl2MzQpEKu2BrN59V8LZxrBK
7AyAs4nIAn6ufHKzv38Bb10gOFbIKYg9CsHjutus3wLB4PiQXNbNqMI+hT+K
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
Z49sxDLHX/lV0gAB/geIllMp
               "], {{
                 TagBox[
                  TooltipBox[
                   PolygonBox[CompressedData["
1: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
lf8BffpVfg==
                    "]], "\"Austria\"", LabelStyle -> "TextStyling"], 
                  Annotation[#, #2, "Tooltip"]& ], 
                 TagBox[
                  TooltipBox[
                   PolygonBox[CompressedData["
1:eJwV1nd4yGceAPCfdWKE4sxSo/Ysqrae0afU1RUX41S50NCLCoKgdHBEI+KM
uqMcrVUjqVWcEdJqEWrFasXeq4kRW90nf3ye7/s87/M+z/f9vrNieFSXwTmC
IJicKwiuFgqCTILCQZCXZ9q/85j7nGEXW1lNEhtJZB4JfEY0/yCGYfSnJ+/Q
kebUJ5RnoUFwmyscIY09bGE5XzCKkUQzgJ70IozudKYx1alAGUqSlwcFgyCL
dOKZThyzGUs4YbSnDeUoTglCyM2DAkGQwTXOk84ZTnCSNI7wM79wgVP8yl6S
WcIC5rOQ9WxnG1vZwFqSSGQ1S1nFCr5lEYtJYALh9KITPRjKCAYzhFHEMIxI
+tGZWlSlMqUow/P8QXCX8xwhlZ3sYDVLmMuHDCGCcSxgDB8xlEiiGc5MZjOd
OcQziVHEEMVExhPLP5nKDObxJQnMYjKf8zGfMIU4/s1SvmEFy0liLYmsYxMp
7OE4v3KINK5zj4dk8ZSy6tGAV3mLbvSkPxG8SxSjmcREpjCNqcxkOd+TylGu
kJldZ0LtqYrUpCXtaEVHOtGVv9KLnkQwgD70JZYkUtjGfo5wmqfktO9DKE5F
6tCQtrxDX6KIYTzjmEACscQzmxUkMpcZrGEd8/mGraxnM9v5gV3s5zDHSec8
xzjBRW5wk0tcJZMM7pLFPXK4Gx6Ijwi0c5GbENoTzgCGMoJxfEosk4hjNktY
wwa2kcIWktnJXg6wj92kcphjnOAk6ZziHGe5zA0yuM297Fx5Sg73Zm5CKEAR
SlCGclSmBo14jfo0pAVt+TNdCKM7vehNH/7Oe/RjAAMZxDBG8RGjGcMnTGAS
k5lCPHP5LwtZzAb2cpjjHOUkp7nKJY5xhos8InjBepCbp9nvBHm0/0A+ChJK
EYoRQl4KUIKyvMyLVKIGNalFVerQkEY0oymNaUIL/kRXwnibTnSjO3+hI21p
SSva8wZv0oXeDGQ4lylaRF6UpjVhDGE4E5nBPBazgh0c5By3eaFoEJSnGhWp
zsuUohgvUoE/UoR85OGxsTnEB+IdHnGLs9zlCbn0Pxd/4zJXyCKT3Pqeihnc
4ypnOEAa+/mBnWxiG9+xlqWsZCGzmcUcvuRfJDCZ0QxlJDFM4lMG0Z8PiCKS
wYxhBLHEM5P5fM0SlrGOrRziAjnNIy+hFKUwZShJaZrRig50pCt/oxfd6E5f
whnMx0wklsl8ThxTmEY8CUxlPBMYxyja0Zi6lKMEBbgpz1Q2spo1pLCFZPZy
mNNc4iH3yW9sCGWpQVVeoQHNeZ22vMFbdCaMHvRkBNGMZSTD+JBIBtCfd+nD
+/SmH0MYSASdaE0bWtCEptSnHo14jYbUphZVqERBAm6YyynSOcYedrGZ7Wzg
fySRyCqWs4gFTCeOaN6jO6/TgsY0oj4NqMcrVOAlihGafRay6+q8ZnCTG+xm
J8lsYgMrWcA8vmIZi1jCdn7mIHs4yiHS+JFdHOA4l/iNO2Rynyc8J0f2+SMP
eSlMPgpSiOKUojY1qENNatGQ5jSjDe3owdu0pyVNqEs1qlCVSpSlJAV4Jo8r
XOV7UkhlHz+xkTl8QSxjGUokg4jgfT5gGJ3pQANqU49XqU9dqvESpSlPBSpT
huLZ92j2mngLDrKb7ewklRS2sIPNbGIN37KRRFawmrV8xzZ+5Cf2sI8jXCaD
xzzhPllkcovzXOA6V7jNAx7yOznleU88ywkO8QvpXOMm5zhFGrtIZj3rSGIV
K1nGIr5mAV8xj/8wixlMI5aJjOczxhLDCIYTTRSDiSSC/oTTg8504E1a05S6
VKcatahKFcpTgbKUojjFKEoh8pOL5/4rj3hIFtc5zUXOc5M73OIa/wfOXAi9

                    "]], "\"Bosnia and Herzegovina\"", LabelStyle -> 
                   "TextStyling"], Annotation[#, #2, "Tooltip"]& ], 
                 TagBox[
                  TooltipBox[
                   PolygonBox[CompressedData["
1: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
TSxnFXNYzf8Box+THQ==
                    "]], "\"Croatia\"", LabelStyle -> "TextStyling"], 
                  Annotation[#, #2, "Tooltip"]& ], 
                 TagBox[
                  TooltipBox[
                   PolygonBox[{2368, 2374, 2380, 2373}], "\"Croatia\"", 
                   LabelStyle -> "TextStyling"], 
                  Annotation[#, #2, "Tooltip"]& ], 
                 TagBox[
                  TooltipBox[
                   PolygonBox[CompressedData["
1:eJwV13l8z2UcAPCfhBK2odChXB2YJEKORSjLsRByz1VzToQRJkcoNVfbjDHH
EOU2V8h9lVBmSm61xRwrCdHbH+/X5/t6Pd/n+xzf1/P6fJ5SXfu36JcrEAhU
yh0IJDwSCCSxmI3sIZ2LXCObHHIV0IE8hFCJGjShD+NIZi67OcNyUohjNlmc
YhPbWMlWDrKXE2SQw3lSmc9qFjGa/vTjcxKYzsesYye7OMIqxrOEBSwjiX0c
5QDpnCO4YCBQhEpUoTYNqUEdGtCMloTRmPo0ohY1qUoQZ33vOINIZB5bOMQ9
8nrnrvigmJvnqMartOV9hhFLIqmUKWR+hJCXYuQhH7e03+FJz6E8w4uUoy71
qE9nevMpSaSwiq0cJp1zZN8fIygQKEgQZShPdcJ4i9ZMZDE7uE7x4EDgFWoR
QS8G0o12NKIeDahPOE0IowOdaU8knehOLGOJZyOXCQmx30TQi+GsYTtZhBb2
L2hOU1oRSScG0IvhDGE8cUxlOjOIJ4nZzGU+C5hDCqksYglf8TXfsIyVrGI1
61jPZr5lEzvYxXb2sZfvOcxBfiSDk/zGac5xhvP8zkUy+YMsLnOJ61wjh7+4
wT/8y23ukrtIIPAQD/MI+SlAQUIowqMUpRjFeZwneJJnKE1ZyvAcz/MCobxM
HepRl0aE8Qb1aUATmvE27ehIF3rwHn3oy2CGEMNQhvERoxjNx4xjApP4lM/4
nC+YQhzTmEEiKSwglUUsYynf8DXLWcVaNpLGOjaxjW/5ju3sZBf72MsBvucQ
P3CYHznCz/zEMTJI5wTH+ZVTnOECmVzkTy5xmWyukcPf/MMtbnCV6/zLTW5z
l/+4w19cIYuznOccv/MHp/mNk/zCUQ6yn93sYQdb2cJmNrCeNaxmJSv4iiUs
ZiFzmc885pDMlyQwiyRmM5N4pjOViUxmLGMYzyfEMoKRDOdDPiCK3gxgENH0
YyD96cX7RNKVnnSnGx1oTxs60Zl3aUtrWtKcCFrwDq1oyluE05g3eY3aNKQG
r1CN6tTidWryKlWpwku8SGUqUoFKlOdZylGKpynJU5TgMQoTTBCFyEce8vIA
uXiQAPec//+4wy1u8jdXyeYKf3KBs5ziV37hBMdJ5xg/c5SfOMIhfuAA+9nD
bnbyHdvYyhY2soE01rKGFSxnKYtZyDySmcVMEkngS6YxhbGMYjSxxDCIKPrT
h2FE0IJG1KE8Je+vR77I5DwZJJPCWMYwlJ7UpTFlyUuA/NyRj3I4xjQmMoHx
DGcEXelCW96lFZV5nlKUoxhPUZRgCpGfIO7JrbnujyNmc4JDbGcDS1hIKonE
M4VpxDGZScQygsFE05coetCFljSkCqGUpiQlKEZRginAw9xWJ+RwgQzWsow1
LGUB85nLbOL4gqnMIZkZzCSBROKZzkTGMZkJjOIjxhDDYIbRh6H0JIpo2tOB
SHrQhXa0oCOtaUsb3iGcZjSmOU2pTRhVqExxCnFDnZVJFqdJYz1zWMEU4pnE
OEYyihg+IJq+9CaKbnSnI614k3DqUo+KVKA8ZSlMAS6pH29xlSvc5AKZnOQY
e9jPZtKYxRCi6EQbOtCRSHoQTV+GMoAYBjKSt3mDCMIJozZVqc7LlONpylKC
xwmlApV5iZpU4wUqUpqSBJHv/h3BXeM0B9nJBtJIIZmZJPI/PFnXyg==
                    "]], "\"Hungary\"", LabelStyle -> "TextStyling"], 
                  Annotation[#, #2, "Tooltip"]& ], 
                 TagBox[
                  TooltipBox[
                   PolygonBox[CompressedData["
1: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
                    "]], "\"Italy\"", LabelStyle -> "TextStyling"], 
                  Annotation[#, #2, "Tooltip"]& ], 
                 TagBox[
                  TooltipBox[
                   
                   PolygonBox[{1371, 1373, 1368, 1365, 1364, 1360, 1359, 1352,
                     1355, 1353, 1356, 1354, 1358, 1357, 1351}], "\"Italy\"", 
                   LabelStyle -> "TextStyling"], 
                  Annotation[#, #2, "Tooltip"]& ], 
                 TagBox[
                  TooltipBox[
                   PolygonBox[{1343, 1348, 1349, 1350, 1341}], "\"Italy\"", 
                   LabelStyle -> "TextStyling"], 
                  Annotation[#, #2, "Tooltip"]& ], 
                 TagBox[
                  TooltipBox[
                   PolygonBox[{1370, 1374, 1377, 1369}], "\"Italy\"", 
                   LabelStyle -> "TextStyling"], 
                  Annotation[#, #2, "Tooltip"]& ]}, {{{}, {{
                    RGBColor[1., 0.52, 0.], 
                    TagBox[
                    TooltipBox[
                    PolygonBox[CompressedData["
1:eJwV1nl8z+cdAPCfGmkddQRNlCBYGndUhDjiVtq0JCVxhSQNEiEUkaNIS1c1
RzFdXGk1TKejtjKs9toqhCmtpsWr69ZaqxpXmWIU7d754/36Hq/n+nyf7+d5
nlZpOQkzHggEAtVIrB4IPFozEGhODZrwC35JEM1oTRidaEFjbtQIBC5xhe9o
7103ouhFMuPIYDKTmMBzZDKbJaxgA6+xms2sYS1b2EQJ+cznFZbxa7ayn4vc
4n/c5yeCgwKBn12/4Vs+5gA7eIe3WEcxC5jONLJIYASDGEhL2lK7qg+x3ibE
fU0eIYY4EokniafpR0PuKn+VL/mUcvbwO9azgS3sYgebeYvDnOEm1bUTTmfG
kMZEppLOM/Qhlno04p56lznPPzlEGdvYSikbWcKrFPA885hDPjlMJ5sspjCZ
PHIpZDHLKWIRaynhff7CQT6igovc5wHji6QvY0llFrnMZSF5zONXvMQiFvMu
e/gzf+Uk/+FO1T9s3mtTj+a0oQtdiWMQI8lhDvm8wHyWsoq1rKeEUnbwLn9k
L+9znApO8BmnOMs5LnCVH7jJbe5xl+oPBgJ1qUU9GvAw9Qkmgkg60I6ORBNL
N3rSm34MYTjxjCKZsUwjkxlkk8N0ZjKHXOaRRwFFLGMFa/gt61nHG5TyNjvZ
zz4OcpTjnORTzvAFX3OeG9ynxkPyhEjiGMU40sgim/ksZSXLWc3rbKCYTWyk
lN/zBz6gnBMc5WOO8AmnOM2/+IqvucolqtXy7QnlEdrQjxSyeZEt7OEolTSo
HQgM5hkyyWISqTzFk/SiO72JYxAxDCSeCWSQTSFFvMoyVvE6xaxjPSVsZi/7
OcRxznKRoDriIIxwOhBJND2Jogvt6UhTQmlDC9ryODF0ozdxDGcEQxnJAmaT
zyzymM5MMkhlAuNJIoVM5rGRvRzgGEc4zb+5wLfc5irX+JHL1Klr7aQN7WhP
JOG0JoxmhBBKA2pRg2r8Vxvfc4eznOc7TnGCk5Sxn33sZg872MV2VrOSNSxi
IXPJYhpTSec5xjKaeIaRwBAG049Y+tOLCLryGC15lGaE0IiHqclP5vgud/iR
G1zhMte5xW3uc4866gRTn0ueKznHl5ykgjI+4D2WUsBsXmEJi1lALlNIYSKj
SCKBYfQhmijCqVs1NnlyibN8QTlHKGMT2yjlTTZTTBFzyWUGU0kngyF0piH1
CaYJdahLEN/L50pu8Q0/cIGb3OY+d7hLbeUb0ZimtCCM1kTRlR70IYaeJDOJ
iWSRSRrjmcAYkhjHMEaRwFgGMpzBPMkgnmAkTzOaeBIZylNEEk0H+hJLJ7rT
ji5EMIAR9Kc34VVrFD+L8zrX+JzPqOAjDlLGPt5hJ9t5m22UsIXNrOBlilhI
X7oRTluaEkpzwuhIV6LowyCi6U4MTxBLT0YwjNEk8ywpTGQ6M5nBXHKZxWQy
mMI05jCbfF4gj0UsZgkvsYBCUpnKJIbSn3geJ4IeDGQkiSQxgecp4EVySGcM
rQihMcEEUZ179rrrVHKOzznNJ1RwjH9wmL/zHiUUs5q1rOI3rKSQfLKYShrp
TCSVFMYzjtEk8SxDGUAvYoiiE13pTHe60J42hNOKljSnIU1oTCghNOIhalft
51TjlvPMda5wjUtcppKvOMmHHKOcQ/yNA+zmT+xiJ9vYypu8wSaK2chrLGYB
88gimUQG0IsexBJBOK15jGg6051OdKQtLWnIgwRVndGcHW9yhlOUc5zDfMg+
drOT7axkOYUUkM14/g8qhKyh
                    "]], "\"Slovenia\"", LabelStyle -> "TextStyling"], 
                    Annotation[#, #2, "Tooltip"]& ]}}}}}], 
              EdgeForm[{
                GrayLevel[0.6], Antialiasing -> True}], 
              GrayLevel[0.93], 
              
              GraphicsComplexBox[{{-0.00585513650629674, \
-0.0009712775098709178}}, {
                Directive[
                 RGBColor[1, 0, 0], 
                 PointSize[Large]], 
                PointBox[1]}]}, 
             PlotRange -> {{-0.024082010447711487`, 
              0.024082010447711504`}, {-0.014812932282639803`, 
              0.01623979172268905}}, ImageSize -> {
               Scaled[0.6]}, Background -> None, Frame -> True, FrameStyle -> 
             GrayLevel[0.85], FrameTicks -> None, TicksStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1]], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "World map", "input" -> 
         "Location:CityData__World map"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Show coordinates", "input" -> 
         "Location:CityData__Show coordinates"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://maps.google.com?ie=UTF8&z=12&t=k&ll=46.06%2C14.51&q=46.06%\
20N%2C%2014.51%20E", "text" -> "Satellite image"}, {}]}]}]}], Typeset`pod4$$ =
    XMLElement[
   "pod", {"title" -> "Local map", "scanner" -> "Data", "id" -> 
     "Map:CityData", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n   ", 
         XMLElement["microsource", {}, {"CityData"}], "\n   ", 
         XMLElement["microsource", {}, {"OpenStreetMap"}], "\n  "}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[
               RasterBox[CompressedData["
1:eJzsvdtvXded51kz85fMyzzVQ78UahCgMEA6L06exj1ApVxPaSBx9dMAjbYr
yGMBLQPzlqoK4oeqQne7fZGScmJJtCWZJHgRJdKkBNuiZJImDR6GkixKNnxs
+RLHCua79mfvLxfXvpx9bjxUUsQPB4f77Ovaa/2+v/vvf/+P/++T//F/+xP9
/S9/8if/x//6J38Svnc//rCB1tZW5uZmb66/s/X+eueDTf2r7/719n7nytJl
0Yd3Omx5f33+xsrUxuJPb089tf/L/yDSl7srP+8ebDdfaEjSjekOBzjw4we3
D+51PjrYSzbOzEy/++41fd7e22HLvQ8/6NzegO58uKMtIo2AyNtj0i3p8Pn5
OX3ubG/pk8HUaXVCfTmT/X10sM/9i+pur+Wz6KLaf6zjPEJ68ODg5s7u8vr7
GsDaJ/pgUwOoERvhc/HixvRQetG8d9Hb11d150wAk35teN7x0d7utu5Nl9Yn
pLn3q5ef/2bpW48W/+zu4nPerptkTjY8ox5Kr8Zbbt/ZqVwCDXR34433X3oy
8IfzP9rbW2951P7tLX/Xuuj3ogOTxqQ8Z/QqN27dKI+PmGHzAIo0gHojyaiK
J8Sj2kDLV5ZWVq7Ak3U5Po9/UjVTXzwZRqf1oudKfioPpk6rNyIk0lFcZffW
nGbUnekfAzrMq492Fsf3dHp9Ar4RnlBAo1mhaVA3CQU67PngwR5gpOWgEdCr
h+dcvrygmaAvzCKdTduZG/oJ/qNV75eioQaMYtJbaI847fc8UfSu+Fxnr+5X
DSl8O1mhJ5zKfHusSNeTdGlBPN8P7u1rKmrubV54RnAj0NnZXgVu6iSfhDRp
k7mquSfc0UJgxmp1NMFNZwW4EQVG0bjzxEkPqwUbP6x4HYJEst0/zc0GIbNu
9MQBdGzlnOk58jpWjE7CzKQmUkvS5NcgNCMvKONx3unc1Ai0ZGI6swaBt8DK
2t9e1VySdmPQCbNLys7YnlFXRx8ZCWnCCAKaxS1pRuFJM7lLn90CfPVp3iI+
aS1GE1E/6QsiikZMq96TVofoe6xCdrMJpoU88fkzbhLoiA027KBhHLmyMz7S
W9PdTvw2GujcubNnTr/48dwTQpyv1/4atQUpqIFVmpDH9Moa3lqdDiK4ee8X
T4M4V1/5Wy2H8p560RMHGpNWZQKvGiW9Ys3JWApiTPQ4Wu96IvHbOuYpyCjL
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
VU3/mJ1OKytDu8PYOFV6Nwt8CLJ0jCOZuDcKo50NHR3ne3tzQmbmzio0TMzh
xEWAfeGpNXvH2ghexEl5ErS5whNiA8d7Tu2K+5kh40u2x06Frax0ERtO1HVI
EIjbG0ea0n9sfqyrnSZdrPeIOKmNk1qUbD6zuCHLBDeaqaSljYfSP6yCQMuc
TH5UbqfsmpoRODjT+97Cnw07izLqYLQW7mvwAno06W1JGnilJqtAnEg+oGsD
cbhfGpFjUepNGTvpbWZeten1XBgTcWDhI+6vu9OwA3nBptvZdHXMlC6eic1m
wMuqSESs4I5s6ptzP7w0fwjlqR8OnHjBExupewq4qUspmaVOw2DR35aI04Zw
hmNu3mri8asG4PDlMi21ElObetqDYEMGYvCMZBgm9t5+IM5ooZyBZAXauNpb
EqLDJ3/wcHNeajMtEyDXSxPb1TepaT+9BZhR02tWaDLga+WSLl3aTbnEzNGn
K5dO4PFAT6KCMHb0o1BXXqprRwe0WsmOrvooQmCx3PaniJ/pTOHXr8tW1O0R
ByVW3Y/h1Ydx1ET3gK83qDrXaKXQWca1dCwKtlN2gGWLBQDx2saOpkfWFdSl
WIx5PxrkFHE6dfTgk5KG2F/LKYdvPwSXI/E1EX8e02QzkxtE85DLSCckbAzV
pEQyRrQtXDtxYO38O9kjcP1p5qPrl8E4M4VG7L6w1NokS99ZxeHc/DWUQ7fs
dJzeWignL5NSqltZT3IS1VKzegZtFzQUQb/Fpi2acr5yYtMkac9eesOHcki3
aHrusc+jQUcqRRi0yw1y7vf0+Ej8SNOh7QKdUuaA9AZ+Mwo3WH2ug4MJn/f9
E0rUDT0EZ11AalebLhgzR4vUj/XqqTeNOEzF0NuLVhFbt9KwdWbqpmLHWst7
hGG7mamemAsWhx6EKzh0C+H9MeZSegsUNVN4iwZwaIwBBH2E/qF1TkQc6bf0
IgfuOow4bOSmMWeQiXvVvL3pxKr5qabKVGdIGsULbsZrJ2WnVF1t1fKrhsqs
fm0XigGM04Po/NqND1fXrxCdH62rdSbk3Kank4JyCKa5o8G5C/Oha8CgkGVm
B8GEvHu6nRAxcS0tcYHCw5YE7NiDZWMybfF1sqWHrcvbs9lcQ/68Hm4NG8nq
l3RnCYhz5CUQJ4DOkZfSybl45oiLzrJeAHpGwzYjGGqtWemxc9Y8YYdDA1wJ
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
JO8rYcBb/KzdKBwvQzgccgijMiG0DTr39DOMvd4hwInp5VuVZ8WKIw13gk4i
DQTqoxcsqHAlJqt0vBPv44RU8+nR65enz18eH+9vYUC0RN98sCuPYFl8sScf
8ZfbIQ8m0Wv/q7/8y1d2Dl4cPztMdIznokvI1+h4SWMyLbEVIfI62RlRenO0
2j+KF4e4GwqslnNU9+fozWW1CfLt5nvyOKef/2jolG+7ynTA8yAxk2fvkTkj
H0zU3d8KefIn+xZPupKdr25h/aZpTiMqp9ZdJ2JqysMnYauiN4mnW+IksW2X
WaCRVuxBzDlPFp0dnPhUmobJ5WxPoBfWaWN1IiOBIWrUClxYnkJplF41m9g6
ORZFSckSsbEldHnigoNH0LuNE9er0gw6PNyKqR5chE10/sWQ9Ktu0tUo9YLh
/AMijRa7AEARwQ5XRsmIzdE2KlkSy1M00kT3ch6acp/gBSFBR9km2q7XtETH
49DhGt/kqCek1B7sEmiQlpfTUfxi/IDuR15GfkFuQh/phYTDOF6ehdoZSeKY
cEOJz9K/eCi9LuSZDK7/4OHVa4u2uuBGSbIlBtgvI8juvP3Rkmybw5wYxDVa
eSYa4RHCblSRx1kBpJ8f1dNH9rm3X9jXzw4U3SCnh/f0V++UBEcdAlOurLqr
YO5HDUmlrppcUqR6Cty+4cRyfIZkrrF9f3/VvLK36lB2SY5MS3F2iiGGRZi2
yfqEs7WxfMcH59VhbpNX2GGnW8dmdDdHq3bJMTagcbqF7fjiDJ4exFqbeMaC
udbj1kXx+Fqc6G6B2Dmz3asMgDZBjiUpIyoBY5XzNh/rZPJso41GXkccexxj
BjqmKouZ29uhPaUsP/QvDjFgucR36FP5AnkBWfUEV6NfLUXlYAl1/bgJIheJ
ZqXcDcl5L1yhWfb49+YidIBugzM7LOJy8l/lZoTlZSB+Lxvnxn2WnF5vfbqq
8Q/Qxy9/mYc5b/7xasQJ30ktJP1M/3WvlUzgrVqu2haYXa0kVAkexzHO47uP
tq7onSlZNeIL6XbbPpd0IIAJq31n1qtkkNhI3az6SbEM4+bJjQxa5+RC4giK
m0YKXPxIyQ88Z9yeHnBObjWBZLdJt22cK59mSYpuGo2zXNIg7FmNRriQSKem
q63sXuggXCnnomptH68QeheuZORwXrJmMS7aEEQSqgmwBH80V4wjxxHv15Rg
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
24OQUtvYuBSykauWIpTS4G7kd5aRb7Xy6Cdr6uEydPOX/vz7uBqaTJrxFYye
LmoeOc9ZON/A6YW+0qu1lpkNzEr9FkVQlluz0K4o4QNZnmeWy8X7XK9fDrAP
gLve1b4w2UtXl/No2M357/b3v918T06nLcz5rokcDR5Hrqf7SHkcc/FNuSKk
06RbG7NzAEo1tonhZXZ0bwDxFTq/T1GP9XGt+A6lP23HTHym3b9r3bX8+fJP
T22cm0tOtdnS53q0yAUwf3Va95ex+UUPQxJp4PaKfizwjxAdPD/Sv/gXvaML
eShIqxIsxM3IgN2WrKJJLrGJ7x0W/T09vHf/xiUCHBriyL+49l9OJ2bnYBXn
Aky2Y0JB6MHuxicfXf/413/762fkCnRCjRh46YMnjzUsciWmBOQ8efpC90bv
Id0btIeOhnyMGbRcXT5FyKK0Zf6dPyyPU2rbMsRDzS4mTdWiiJQaTmf31qe0
MFCYM4XI5cJEUS0e5z+Pf9J9ZPA4q37lJdiSRjGvu9QVlglprBcqUhUS0W3l
A/o0prGCYJCUO6hON4EKXGfTAAOLmTjMU3l6wJxt0/k2Jpxy+T+BGQLK
                "], Automatic, {0, 255}], PlotRangePadding -> None, 
               ImageSize -> {550, 256}, PlotRange -> {{0, 550}, {0, 256}}, 
               TicksStyle -> Directive[
                 GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                 FontOpacity -> 1]], 
              StyleBox[
               
               RowBox[{
                "\"(\"", "\[NoBreak]", 
                 "\"based on current OpenStreetMap data\"", "\[NoBreak]", 
                 "\")\""}], {
               FontColor -> GrayLevel[0.7], FontSize -> 10, FontFamily -> 
                "Roboto", 
                GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}]}, "Labeled", DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"]}, {
                  
                  ItemBox[#2, Alignment -> {Left, Inherited}, 
                   DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox["Labeled", FontFamily -> "Roboto", FontSize -> 13], 
                "[", 
                RowBox[{#, ",", #2, ",", 
                  TemplateBox[{
                    GridBox[{{
                    StyleBox[
                    "Bottom", FontFamily -> "Roboto", FontSize -> 13], 
                    StyleBox[
                    "Left", FontFamily -> "Roboto", FontSize -> 13]}}, 
                    RowSpacings -> 1, ColumnSpacings -> 1, RowAlignments -> 
                    Baseline, ColumnAlignments -> Center]}, "Matrix", 
                   DisplayFunction -> (
                    RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
                   InterpretationFunction -> (#& )]}], "]"}]& )], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "statelist", {
        "count" -> "13", "value" -> "30 kilometers across", "delimiters" -> 
         ""}, {
         XMLElement[
         "state", {
          "name" -> "7 kilometers across", "input" -> 
           "Map:CityData__7 kilometers across"}, {}], 
         XMLElement[
         "state", {
          "name" -> "10 kilometers across", "input" -> 
           "Map:CityData__10 kilometers across"}, {}], 
         XMLElement[
         "state", {
          "name" -> "30 kilometers across", "input" -> 
           "Map:CityData__30 kilometers across"}, {}], 
         XMLElement[
         "state", {
          "name" -> "60 kilometers across", "input" -> 
           "Map:CityData__60 kilometers across"}, {}], 
         XMLElement[
         "state", {
          "name" -> "120 kilometers across", "input" -> 
           "Map:CityData__120 kilometers across"}, {}], 
         XMLElement[
         "state", {
          "name" -> "240 kilometers across", "input" -> 
           "Map:CityData__240 kilometers across"}, {}], 
         XMLElement[
         "state", {
          "name" -> "470 kilometers across", "input" -> 
           "Map:CityData__470 kilometers across"}, {}], 
         XMLElement[
         "state", {
          "name" -> "940 kilometers across", "input" -> 
           "Map:CityData__940 kilometers across"}, {}], 
         XMLElement[
         "state", {
          "name" -> "1900 kilometers across", "input" -> 
           "Map:CityData__1900 kilometers across"}, {}], 
         XMLElement[
         "state", {
          "name" -> "3700 kilometers across", "input" -> 
           "Map:CityData__3700 kilometers across"}, {}], 
         XMLElement[
         "state", {
          "name" -> "7300 kilometers across", "input" -> 
           "Map:CityData__7300 kilometers across"}, {}], 
         XMLElement[
         "state", {
          "name" -> "12000 kilometers across", "input" -> 
           "Map:CityData__12000 kilometers across"}, {}], 
         XMLElement[
         "state", {
          "name" -> "23000 kilometers across", "input" -> 
           "Map:CityData__23000 kilometers across"}, {}]}], 
       XMLElement[
       "state", {
        "name" -> "Non-metric", "input" -> "Map:CityData__Non-metric"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://maps.google.com?ie=UTF8&z=12&t=k&ll=46.06%2C14.51&q=46.06%\
20N%2C%2014.51%20E", "text" -> "Satellite image"}, {}]}]}]}], Typeset`pod5$$ =
    XMLElement[
   "pod", {"title" -> "Administrative regions", "scanner" -> "Data", "id" -> 
     "AdministrativeRegions:CityData", "position" -> "500", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"CityData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Entity[\"City\", {\"Ljubljana\", \"Osrednjeslovenska\", \
\"Slovenia\"}][EntityProperty[\"City\", \"Country\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"region\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 "\"Ljubljana City\""}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"country\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 FormBox[
                  TagBox[
                   TagBox["\"Slovenia\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {CountryData, "Slovenia"}]], Identity], 
                  TraditionalForm]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Current local time", "scanner" -> "Data", "id" -> 
     "CurrentTime:CityData", "position" -> "600", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"CityData"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             TemplateBox[{
               StyleBox[
                RowBox[{
                  TemplateBox[{"\"2:30 pm \"", 
                    StyleBox["\"CET\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], 
                  StyleBox[
                   RowBox[{"\[NoBreak]", 
                    PaneBox[
                    TagBox["\"  |  \"", 
                    $CellContext`TagBoxWrapper["TeX" -> "\\\\"]], 
                    BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                  StyleBox["\"Thursday, March 6, 2025\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], LinebreakAdjustments -> {1, 10, 0, 0, 100}, 
                LineIndent -> 0]}, "RowDefault"], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Current weather", "scanner" -> "Data", "id" -> 
     "WeatherPod:CityData", "position" -> "700", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"CityData"}], "\n    ", 
         XMLElement["microsource", {}, {"WeatherData"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 RowBox[{
                   StyleBox[
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["19", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "19", "SRString" -> "19"]], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"\[Degree]C\"", {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                   StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    TagBox["\"  |  \"", 
                    $CellContext`TagBoxWrapper["TeX" -> "\\\\"]], 
                    BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                   StyleBox[
                    TemplateBox[{
                    StyleBox["\"relative humidity: \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["30", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "30", "SRString" -> "30"]], "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, "RowDefault"], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                   StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    TagBox["\"  |  \"", 
                    $CellContext`TagBoxWrapper["TeX" -> "\\\\"]], 
                    BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                   StyleBox[
                    TemplateBox[{
                    StyleBox["\"wind: \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["2", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "2", "SRString" -> "2"]], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    
                    RowBox[{"\"m\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"s\""}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, "RowDefault"], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], LinebreakAdjustments -> {1, 10, 0, 0, 100}, 
                 LineIndent -> 0]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Show history", "input" -> 
         "WeatherPod:CityData__Show history"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Show non-metric", "input" -> 
         "WeatherPod:CityData__Show non-metric"}, {}]}]}], Typeset`pod8$$ = 
   XMLElement[
   "pod", {"title" -> "Nearby cities", "scanner" -> "Data", "id" -> 
     "CityHierarchyInfo:CityData", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"CityData"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 TagBox[
                  GridBox[{{
                    TagBox[
                    TagBox["\"Kranj\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {
                    CityData, {"Kranj", "Gorenjska", "Slovenia"}}]], 
                    Identity], 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["24", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "24", "SRString" -> "24"]], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", {FontSize -> 0.9 Inherited, FontFamily -> 
                    "Roboto", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0}]}], Identity], #& , SyntaxForm -> Dot], 
                    "  ", 
                    StyleBox[
                    
                    RowBox[{"\"(\"", "\[NoBreak]", "\"kilometers\"", 
                    "\[NoBreak]", "\")\""}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" \"", 
                    StyleBox["\"north\[Hyphen]northwest\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["36357", #& ], "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"people\"", {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, {
                    TemplateBox[{",", "\",\"", 
                    TagBox[
                    TagBox["\"Klagenfurt\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {
                    CityData, {"Klagenfurt", "Carinthia", "Austria"}}]], 
                    Identity], 
                    TagBox[
                    TagBox["\"Carinthia\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {
                    AdministrativeDivisionData, {"Carinthia", "Austria"}}]], 
                    Identity]}, "RowWithSeparators"], 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["64", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "64", "SRString" -> "64"]], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", {FontSize -> 0.9 Inherited, FontFamily -> 
                    "Roboto", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0}]}], Identity], #& , SyntaxForm -> Dot], 
                    "  ", 
                    StyleBox[
                    
                    RowBox[{"\"(\"", "\[NoBreak]", "\"kilometers\"", 
                    "\[NoBreak]", "\")\""}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" \"", 
                    StyleBox["\"north\[Hyphen]northwest\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["92397", #& ], "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"people\"", {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, {
                    TemplateBox[{",", "\",\"", 
                    TagBox[
                    TagBox["\"Trieste\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {
                    CityData, {"Trieste", "FriuliVeneziaGiulia", "Italy"}}]], 
                    Identity], 
                    TagBox[
                    TagBox["\"Friuli Venezia Giulia\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {
                    AdministrativeDivisionData, {
                    "FriuliVeneziaGiulia", "Italy"}}]], Identity]}, 
                    "RowWithSeparators"], 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["73", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "73", "SRString" -> "73"]], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", {FontSize -> 0.9 Inherited, FontFamily -> 
                    "Roboto", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0}]}], Identity], #& , SyntaxForm -> Dot], 
                    "  ", 
                    StyleBox[
                    
                    RowBox[{"\"(\"", "\[NoBreak]", "\"kilometers\"", 
                    "\[NoBreak]", "\")\""}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" \"", 
                    StyleBox["\"southwest\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["207128", #& ], "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"people\"", {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, {
                    TemplateBox[{",", "\",\"", 
                    TagBox[
                    TagBox["\"Rijeka\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {
                    CityData, {"Rijeka", "PrimorjeGorskiKotar", "Croatia"}}]],
                     Identity], 
                    TagBox[
                    TagBox["\"Primorje-Gorski Kotar\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {
                    AdministrativeDivisionData, {
                    "PrimorjeGorskiKotar", "Croatia"}}]], Identity]}, 
                    "RowWithSeparators"], 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["81", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "81", "SRString" -> "81"]], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", {FontSize -> 0.9 Inherited, FontFamily -> 
                    "Roboto", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0}]}], Identity], #& , SyntaxForm -> Dot], 
                    "  ", 
                    StyleBox[
                    
                    RowBox[{"\"(\"", "\[NoBreak]", "\"kilometers\"", 
                    "\[NoBreak]", "\")\""}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" \"", 
                    StyleBox["\"south\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["141172", #& ], "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"people\"", {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, {
                    TagBox[
                    TagBox["\"Maribor\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {
                    CityData, {"Maribor", "Podravska", "Slovenia"}}]], 
                    Identity], 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["103", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "103", "SRString" -> "103"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", {FontSize -> 0.9 Inherited, FontFamily -> 
                    "Roboto", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0}]}], Identity], #& , SyntaxForm -> Dot], 
                    "  ", 
                    StyleBox[
                    
                    RowBox[{"\"(\"", "\[NoBreak]", "\"kilometers\"", 
                    "\[NoBreak]", "\")\""}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" \"", 
                    StyleBox["\"east\[Hyphen]northeast\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["95171", #& ], "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"people\"", {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, {
                    TagBox[
                    TagBox["\"Zagreb\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {
                    CityData, {"Zagreb", "GradZagreb", "Croatia"}}]], 
                    Identity], 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["117", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "117", "SRString" -> "117"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", {FontSize -> 0.9 Inherited, FontFamily -> 
                    "Roboto", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0}]}], Identity], #& , SyntaxForm -> Dot], 
                    "  ", 
                    StyleBox[
                    
                    RowBox[{"\"(\"", "\[NoBreak]", "\"kilometers\"", 
                    "\[NoBreak]", "\")\""}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" \"", 
                    StyleBox["\"east\[Hyphen]southeast\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["686568", #& ], "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"people\"", {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Left, Left, Left}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxBackground -> {"Columns" -> {{None}}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, FrameStyle -> 
                   GrayLevel[0.84], BaselinePosition -> Automatic, 
                   AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
                 False]}, {
                PaneBox[
                 TagBox[
                  Cell[
                   TextData[{
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", 
                    "\"straight\[Hyphen]line distances between city \
centers\"", "\[NoBreak]", "\")\""}], TraditionalForm]]], {
                    FontSize -> 10, FontFamily -> "Roboto", 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}]], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Show non-metric", "input" -> 
         "CityHierarchyInfo:CityData__Show non-metric"}, {}], 
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "CityHierarchyInfo:CityData__More"}, {}]}]}], Typeset`pod9$$ = 
   XMLElement[
   "pod", {"title" -> "Nearby airports", "scanner" -> "Data", "id" -> 
     "AirportHierarchyInfo:CityData", "position" -> "900", "error" -> "false",
      "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"CityData"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 TagBox[
                  GridBox[{{
                    TagBox[
                    TagBox["\"Brnik\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {AirportData, "LJLJ"}]], Identity], 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["19", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "19", "SRString" -> "19"]], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", {FontSize -> 0.9 Inherited, FontFamily -> 
                    "Roboto", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0}]}], Identity], #& , SyntaxForm -> Dot], 
                    "  ", 
                    StyleBox[
                    
                    RowBox[{"\"(\"", "\[NoBreak]", "\"kilometers\"", 
                    "\[NoBreak]", "\")\""}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" \"", 
                    StyleBox["\"north\[Hyphen]northwest\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"]}, {
                    TagBox[
                    TagBox["\"Klagenfurt Airport\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {AirportData, "LOWK"}]], Identity], 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["66", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "66", "SRString" -> "66"]], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", {FontSize -> 0.9 Inherited, FontFamily -> 
                    "Roboto", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0}]}], Identity], #& , SyntaxForm -> Dot], 
                    "  ", 
                    StyleBox[
                    
                    RowBox[{"\"(\"", "\[NoBreak]", "\"kilometers\"", 
                    "\[NoBreak]", "\")\""}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" \"", 
                    StyleBox["\"north\[Hyphen]northwest\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"]}, {
                    TagBox[
                    TagBox["\"Klagenfurt Airport\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {AirportData, "LOXK"}]], Identity], 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["66", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "66", "SRString" -> "66"]], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", {FontSize -> 0.9 Inherited, FontFamily -> 
                    "Roboto", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0}]}], Identity], #& , SyntaxForm -> Dot], 
                    "  ", 
                    StyleBox[
                    
                    RowBox[{"\"(\"", "\[NoBreak]", "\"kilometers\"", 
                    "\[NoBreak]", "\")\""}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" \"", 
                    StyleBox["\"north\[Hyphen]northwest\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"]}, {
                    TagBox[
                    TagBox["\"Sport Airport Grobnicko Polje\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {AirportData, "LDRG"}]], Identity], 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["76", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "76", "SRString" -> "76"]], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", {FontSize -> 0.9 Inherited, FontFamily -> 
                    "Roboto", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0}]}], Identity], #& , SyntaxForm -> Dot], 
                    "  ", 
                    StyleBox[
                    
                    RowBox[{"\"(\"", "\[NoBreak]", "\"kilometers\"", 
                    "\[NoBreak]", "\")\""}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" \"", 
                    StyleBox["\"south\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxBackground -> {"Columns" -> {{None}}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, FrameStyle -> 
                   GrayLevel[0.84], BaselinePosition -> Automatic, 
                   AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
                 False]}, {
                PaneBox[
                 TagBox[
                  Cell[
                   TextData[{
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", 
                    "\"straight\[Hyphen]line distances between city center \
and airport\"", "\[NoBreak]", "\")\""}], TraditionalForm]]], {
                    FontSize -> 10, FontFamily -> "Roboto", 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}]], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Show non-metric", "input" -> 
         "AirportHierarchyInfo:CityData__Show non-metric"}, {}], 
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "AirportHierarchyInfo:CityData__More"}, {}]}]}], Typeset`pod10$$ = 
   XMLElement[
   "pod", {"title" -> "Geographic properties", "scanner" -> "Data", "id" -> 
     "GeographicProperties:CityData", "position" -> "1000", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"CityData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Dataset[EntityValue[Entity[\"City\", {\"Ljubljana\", \
\"Osrednjeslovenska\", \"Slovenia\"}], {EntityProperty[\"City\", \
\"Elevation\"], EntityProperty[\"City\", \"Area\"], EntityProperty[\"City\", \
\"PopulationDensity\"]}, \"PropertyAssociation\"]]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   TagBox["\"elevation\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["298", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "298", "SRString" -> "298"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"m\"", {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                   SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"area\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["163.76", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "163.76", "SRString" -> "163.76"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    SuperscriptBox["\"km\"", "2"], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                   SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"population density\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1754", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1754", "SRString" -> "1754"]], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"people per square kilometer\"", {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                   SyntaxForm -> Dot], 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0, ZeroWidthTimes -> False]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata,\
quantitydata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Show non-metric", "input" -> 
         "GeographicProperties:CityData__Show non-metric"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement["units", {"count" -> "2"}, {
           XMLElement[
           "unit", {"short" -> "km^2", "long" -> "square kilometers"}, {}], 
           XMLElement[
           "unit", {"short" -> "m", "long" -> "meters"}, {}]}]}]}]}], 
   Typeset`pod11$$ = XMLElement[
   "pod", {"title" -> "Nearby features", "scanner" -> "Data", "id" -> 
     "FeaturesHierarchyInfo:CityData", "position" -> "1100", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"CityData"}], "\n    ", 
         XMLElement["microsource", {}, {"NuclearReactorData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"IAEAPowerReactorInformationSystem"}], 
         "\n   "}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 TagBox[
                  GridBox[{{
                    StyleBox["\"mountain\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    TemplateBox[{
                    TagBox[
                    TagBox["\"Grintovec\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {MountainData, "Grintovec"}]], Identity], 
                    "\" \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["2558", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "2558", "SRString" -> "2558"]], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"meters\"", {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["33", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "33", "SRString" -> "33"]], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", {FontSize -> 0.9 Inherited, FontFamily -> 
                    "Roboto", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0}]}], Identity], #& , SyntaxForm -> Dot], 
                    "  ", 
                    StyleBox[
                    
                    RowBox[{"\"(\"", "\[NoBreak]", "\"kilometers\"", 
                    "\[NoBreak]", "\")\""}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" \"", 
                    StyleBox["\"north\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"]}, {
                    StyleBox["\"mountain\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    TemplateBox[{
                    TagBox[
                    TagBox["\"Skuta\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {MountainData, "Skuta"}]], Identity], "\" \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["2532", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "2532", "SRString" -> "2532"]], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"meters\"", {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["34", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "34", "SRString" -> "34"]], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", {FontSize -> 0.9 Inherited, FontFamily -> 
                    "Roboto", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0}]}], Identity], #& , SyntaxForm -> Dot], 
                    "  ", 
                    StyleBox[
                    
                    RowBox[{"\"(\"", "\[NoBreak]", "\"kilometers\"", 
                    "\[NoBreak]", "\")\""}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" \"", 
                    StyleBox["\"north\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"]}, {
                    StyleBox["\"nuclear power site\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    TemplateBox[{
                    TagBox[
                    TagBox["\"Kr\[SHacek]ko\"", 
                    $CellContext`TagBoxWrapper[
                    "EntityClass" -> {NuclearReactorData, "Krsko"}]], 
                    Identity]}, "RowDefault"], 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["81", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "81", "SRString" -> "81"]], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", {FontSize -> 0.9 Inherited, FontFamily -> 
                    "Roboto", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0}]}], Identity], #& , SyntaxForm -> Dot], 
                    "  ", 
                    StyleBox[
                    
                    RowBox[{"\"(\"", "\[NoBreak]", "\"kilometers\"", 
                    "\[NoBreak]", "\")\""}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" \"", 
                    StyleBox["\"east\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"]}, {
                    StyleBox["\"dam\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    TemplateBox[{
                    TagBox[
                    TagBox["\"Vajont Dam\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {DamData, "VajontDam"}]], Identity], "\" \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["261", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "261", "SRString" -> "261"]], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"meters\"", {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["142", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "142", "SRString" -> "142"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", {FontSize -> 0.9 Inherited, FontFamily -> 
                    "Roboto", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0}]}], Identity], #& , SyntaxForm -> Dot], 
                    "  ", 
                    StyleBox[
                    
                    RowBox[{"\"(\"", "\[NoBreak]", "\"kilometers\"", 
                    "\[NoBreak]", "\")\""}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" \"", 
                    StyleBox["\"west\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"]}, {
                    StyleBox["\"dam\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    TemplateBox[{
                    TagBox[
                    TagBox["\"K\[ODoubleDot]lnbreinsperre Dam\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {DamData, "Kolnbreinsperre"}]], Identity], 
                    "\" \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["200", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "200", "SRString" -> "200"]], 
                    "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"meters\"", {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["145", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "145", "SRString" -> "145"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", {FontSize -> 0.9 Inherited, FontFamily -> 
                    "Roboto", LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0}]}], Identity], #& , SyntaxForm -> Dot], 
                    "  ", 
                    StyleBox[
                    
                    RowBox[{"\"(\"", "\[NoBreak]", "\"kilometers\"", 
                    "\[NoBreak]", "\")\""}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" \"", 
                    StyleBox["\"northwest\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Left, Left, Left}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxBackground -> {"Columns" -> {{None}}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, FrameStyle -> 
                   GrayLevel[0.84], BaselinePosition -> Automatic, 
                   AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
                 False]}, {
                PaneBox[
                 TagBox[
                  Cell[
                   TextData[{
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", 
                    "\"straight\[Hyphen]line distances between city center \
and feature coordinates\"", "\[NoBreak]", "\")\""}], TraditionalForm]]], {
                    FontSize -> 10, FontFamily -> "Roboto", 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}]], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Show non-metric", "input" -> 
         "FeaturesHierarchyInfo:CityData__Show non-metric"}, {}], 
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "FeaturesHierarchyInfo:CityData__More"}, {}]}]}], Typeset`pod12$$ = 
   XMLElement[
   "pod", {"title" -> "Nearest sea", "scanner" -> "Data", "id" -> 
     "OceansHierarchyInfo:CityData", "position" -> "1200", "error" -> "false",
      "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"CityData"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  TagBox[
                   TagBox["\"Adriatic Sea\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {OceanData, "AdriaticSea"}]], Identity], 
                  StyleBox["\" (\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                  TemplateBox[{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["73", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "73", "SRString" -> "73"]], "\[NoBreak]", 
                    StyleBox[
                    RowBox[{}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\[InvisibleSpace]", "\[ThickSpace]", 
                    "\[InvisibleSpace]", 
                    StyleBox[
                    "\"km\"", {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "  ", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"kilometers\"", "\[NoBreak]", 
                    "\")\""}], {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" \"", 
                    StyleBox["\"southwest\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], 
                  StyleBox["\") \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"]}, {
                PaneBox[
                 TagBox[
                  Cell[
                   TextData[{
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", 
                    "\"straight\[Hyphen]line distance between city center and \
shore\"", "\[NoBreak]", "\")\""}], TraditionalForm]]], {
                    FontSize -> 10, FontFamily -> "Roboto", 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}]], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Show non-metric", "input" -> 
         "OceansHierarchyInfo:CityData__Show non-metric"}, {}]}]}], 
   Typeset`pod13$$ = XMLElement[
   "pod", {"title" -> "Notable people born in Ljubljana", "scanner" -> "Data",
      "id" -> "NotablePeople:CityData", "position" -> "1300", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n   ", 
         XMLElement["microsource", {}, {"CityData"}], "\n   ", 
         XMLElement["microsource", {}, {"PeopleData"}], "\n  "}], 
       XMLElement[
       "minput", {}, {
        "Entity[\"City\", {\"Ljubljana\", \"Osrednjeslovenska\", \
\"Slovenia\"}][EntityProperty[\"City\", \"PeopleBornInCity\"]]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               StyleBox[
                StyleBox[
                 TemplateBox[{
                   FormBox[
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TagBox["\"Slavoj Zizek\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {$CellContext`PeopleData, 
                    "SlavojZizek::hfm63"}]], Identity], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"philosopher, etc.\"", 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], LineIndent -> 0}]}, "RowDefault"], 
                    LineIndent -> 0], TraditionalForm], "\"  \"", 
                   StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    FormBox[
                    TagBox["\"1949\"", Identity], TraditionalForm], 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], LineIndent -> 0}]}, "RowDefault"], 
                 LineIndent -> 0], 
                LinebreakAdjustments -> {1, 100, 0, 0, 100}], "\n", 
               StyleBox[
                StyleBox[
                 TemplateBox[{
                   FormBox[
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TagBox["\"Zeljko Ivanek\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {$CellContext`PeopleData, 
                    "ZeljkoIvanek::642w7"}]], Identity], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"actor\"", "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], LineIndent -> 0}]}, "RowDefault"], 
                    LineIndent -> 0], TraditionalForm], "\"  \"", 
                   StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    FormBox[
                    TagBox["\"1957\"", Identity], TraditionalForm], 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], LineIndent -> 0}]}, "RowDefault"], 
                 LineIndent -> 0], 
                LinebreakAdjustments -> {1, 100, 0, 0, 100}], "\n", 
               StyleBox[
                StyleBox[
                 TemplateBox[{
                   FormBox[
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TagBox["\"Goran Dragi\[CAcute]\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {$CellContext`PeopleData, 
                    "GoranDragic::vbr3x"}]], Identity], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"basketball player\"", 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], LineIndent -> 0}]}, "RowDefault"], 
                    LineIndent -> 0], TraditionalForm], "\"  \"", 
                   StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    FormBox[
                    TagBox["\"1986\"", Identity], TraditionalForm], 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], LineIndent -> 0}]}, "RowDefault"], 
                 LineIndent -> 0], 
                LinebreakAdjustments -> {1, 100, 0, 0, 100}], "\n", 
               StyleBox[
                StyleBox[
                 TemplateBox[{
                   FormBox[
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TagBox["\"Samir Handanovi\[CAcute]\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {$CellContext`PeopleData, 
                    "SamirHandanovic::xbw3d"}]], Identity], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"soccer player\"", "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], LineIndent -> 0}]}, "RowDefault"], 
                    LineIndent -> 0], TraditionalForm], "\"  \"", 
                   StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    FormBox[
                    TagBox["\"1984\"", Identity], TraditionalForm], 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], LineIndent -> 0}]}, "RowDefault"], 
                 LineIndent -> 0], 
                LinebreakAdjustments -> {1, 100, 0, 0, 100}], "\n", 
               StyleBox[
                StyleBox[
                 TemplateBox[{
                   FormBox[
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TagBox["\"Zoran Dragi\[CAcute]\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {$CellContext`PeopleData, 
                    "ZoranDragic::3dbvp"}]], Identity], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"basketball player\"", 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], LineIndent -> 0}]}, "RowDefault"], 
                    LineIndent -> 0], TraditionalForm], "\"  \"", 
                   StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    FormBox[
                    TagBox["\"1989\"", Identity], TraditionalForm], 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], LineIndent -> 0}]}, "RowDefault"], 
                 LineIndent -> 0], 
                LinebreakAdjustments -> {1, 100, 0, 0, 100}], "\n", 
               StyleBox[
                StyleBox[
                 TemplateBox[{
                   FormBox[
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TagBox["\"Milivoje Novakovi\[CAcute]\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {$CellContext`PeopleData, 
                    "MilivojeNovakovic::shb7c"}]], Identity], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"association football player\"", 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], LineIndent -> 0}]}, "RowDefault"], 
                    LineIndent -> 0], TraditionalForm], "\"  \"", 
                   StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    FormBox[
                    TagBox["\"1979\"", Identity], TraditionalForm], 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], LineIndent -> 0}]}, "RowDefault"], 
                 LineIndent -> 0], 
                LinebreakAdjustments -> {1, 100, 0, 0, 100}], "\n", 
               StyleBox[
                StyleBox[
                 TemplateBox[{
                   FormBox[
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TagBox["\"Rasho Nesterovi\[CAcute]\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {$CellContext`PeopleData, 
                    "RashoNesterovic::57b33"}]], Identity], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"basketball player\"", 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], LineIndent -> 0}]}, "RowDefault"], 
                    LineIndent -> 0], TraditionalForm], "\"  \"", 
                   StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    FormBox[
                    TagBox["\"1976\"", Identity], TraditionalForm], 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], LineIndent -> 0}]}, "RowDefault"], 
                 LineIndent -> 0], 
                LinebreakAdjustments -> {1, 100, 0, 0, 100}], "\n", 
               StyleBox[
                StyleBox[
                 TemplateBox[{
                   FormBox[
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TagBox["\"Alja\[ZHacek] Bedene\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {$CellContext`PeopleData, 
                    "AljazBedene::97zsk"}]], Identity], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"tennis player\"", "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], LineIndent -> 0}]}, "RowDefault"], 
                    LineIndent -> 0], TraditionalForm], "\"  \"", 
                   StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    FormBox[
                    TagBox["\"1989\"", Identity], TraditionalForm], 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], LineIndent -> 0}]}, "RowDefault"], 
                 LineIndent -> 0], 
                LinebreakAdjustments -> {1, 100, 0, 0, 100}], "\n", 
               StyleBox[
                StyleBox[
                 TemplateBox[{
                   FormBox[
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TagBox["\"Srecko Katanec\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {$CellContext`PeopleData, 
                    "SreckoKatanec::zndt7"}]], Identity], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"athlete\"", "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], LineIndent -> 0}]}, "RowDefault"], 
                    LineIndent -> 0], TraditionalForm], "\"  \"", 
                   StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    FormBox[
                    TagBox["\"1963\"", Identity], TraditionalForm], 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], LineIndent -> 0}]}, "RowDefault"], 
                 LineIndent -> 0], 
                LinebreakAdjustments -> {1, 100, 0, 0, 100}], "\n", 
               StyleBox[
                StyleBox[
                 TemplateBox[{
                   FormBox[
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TagBox["\"Bo\[SHacek]tjan Cesar\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {$CellContext`PeopleData, 
                    "BostjanCesar::6876p"}]], Identity], "\"  \"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"association football player\"", 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], LineIndent -> 0}]}, "RowDefault"], 
                    LineIndent -> 0], TraditionalForm], "\"  \"", 
                   StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    FormBox[
                    TagBox["\"1982\"", Identity], TraditionalForm], 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], LineIndent -> 0}]}, "RowDefault"], 
                 LineIndent -> 0], 
                LinebreakAdjustments -> {1, 100, 0, 0, 100}], "\n", 
               "\"\[Ellipsis]\""}], 
             LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}], 
     XMLElement["states", {"count" -> "3"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> "NotablePeople:CityData__More"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Show dates", "input" -> 
         "NotablePeople:CityData__Show dates"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Show deaths", "input" -> 
         "NotablePeople:CityData__Show deaths"}, {}]}]}], Typeset`pod14$$ = 
   XMLElement[
   "pod", {"title" -> "Founding date", "scanner" -> "Data", "id" -> 
     "FoundingDates:CityData", "position" -> "1400", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"CityData"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              TemplateBox[{
                FormBox[
                 TagBox["\"\[TildeTilde] 1220\"", Identity], TraditionalForm],
                 "\" \"", 
                StyleBox[
                 RowBox[{"\"(\"", "\[NoBreak]", 
                   TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["805", #& ], "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"years\"", {
                    FontSize -> 0.9 Inherited, FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" ago\""}, "RowDefault"], 
                   "\[NoBreak]", "\")\""}], {
                  GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}, "RowDefault"], "\" \"", 
              StyleBox[
               
               TemplateBox[{"\"(\"", "\"incorporation date\"", "\")\""}, 
                "RowDefault"], {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}]}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> "FoundingDates:CityData__More"}, {}]}]}],
    Typeset`pod15$$ = XMLElement[
   "pod", {"title" -> "Wikipedia page hits history", "scanner" -> "Data", 
     "id" -> "PopularityPod:WikipediaStatsData", "position" -> "1500", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  GraphicsBox[{
                    GraphicsComplexBox[CompressedData["
1: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
Uz6lC6/q0NhTeahn7Zo4qG4X+E41o/FKxeN9SgwPq0hdyth8jMbmTEOttN9s
+F15q8DEi8boLM/DK3w4cE5e2uNmBI3lhYpppAofCq5SpiMpTB/IjLy6nMiG
rLPGC+48YOY/B1c5MHmvV1ki9vE1jaIzgqnKLKYPhs7Mnv6ROdYzfmijFwc7
d49VX/pB41bZVCONjQngSrsqJc8Q4pUTnR+fjCXBDOk1VimKQiwg7P/GqTP7
oHElUuuFqFC6LPoFKQAr70uzwUSIXqvK1xSE3oCbvYqv+9wI/LnrykmjpGDY
EtTjKAwgMLFoLP/orxDY+iw/8R6PwDqNrxGaK4JAf9D7QsFtAscNdrfM0A2H
sM/5BtxyAh02bbKu/c34Q8BI1oa3BA6E7bQPmRUBw1rv9K2GCFSUktr01IwN
obILStsnCPzuflymzjcWSInaAwdkSKyYdrsy2I0NZotUFpqvYHzh2awV/21m
wYIX1/ynGZCousLbrlKL8YuDPdd/mDP88+7G9DMn2DD8IudijTOJp3I17s/O
Z8PJGn8p20skFiVqTb89xPDv0Gjj6WgSdynkqKEGw7/adT796QyP8d8+Sfsv
AdwSZA33lpCoU3TCpf0EB/hyk1p6b0i0PLhPdt9CFixf/eNVXy+JU8Ovq/R/
YsED24igOWMkGognuDqLxsDakoA1ibMo3BQ6oN68IwbOqBMjSkuZ/f/Z/yC7
IRryi793q2ymcEPPBVWvxdFg2T7Ds38X0xd3Tou+z2DD6NDClHY7CuuNMwbI
Dh58buY/LvmPyUPboo/DqTzYaql8ZX8ohb0bPY8aL+QD78tOF48kCt1PDJoP
ifHh3aNmg+EiCk2/v97hepsL7YL61Y5VTJ+oy/adY+atj+2+w7qT8Qf16n1K
7QlgrjJffOZXJg+d7xPPlMVCSVKJw1cxhu9v3yu228wDzx81Oc/k/98P9iX7
fvMhuu9T3O61TB7G4z+dfsOHPDL97iEjGpdUK+nZu7BBM9zdVdWG4R+xQ1rJ
nQlwV1bzhao7jUGtM4zCDseC32VHCcmrNMoU1NwJfMiCIu+kH3k8Gs2jEvjl
XXwYjPaZ+S6HxgqZE+qtyTEg+v7h9CPPaAwgrGV2nEyEwXUnl7a+o3FP7m6r
AVYCvM4oOf6BYPxeOWr0zoV4mF8ou5fzj8aGgKLuxIVJYJvt1nxNRohhXQWq
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
hw3PJw498z5HomVwp2VVXjz8MN4WNhbMvN6hH03tjbGgYHpRhZXI+EaN2teo
mTeAszxl18VCJi8v+53up3DhfO2YYVMliT/D5Eze3GLBvsO1OuPtJJ41rFBe
y+RRUNj4L+YLic6L5GtGmmOg5cUqHogz+5yes3jrf8zvV+hZCgoUSnx9lrJw
kAVHjhN3C9cyfOOYlFd5NwIsxLrSRowoPDN2RLOthA0lVRbPJGwoXCcr1/85
hguObQafLN0Z/tnonybL8J54S/r001cp1Olw0Cpckgiy8Qa/f/KY+TU1NrOv
4oP8wlVP4u5QmNn4d9WyMzw4c26qVNgzCt8PH9F79JcHq2Ol1lPvKLxk8GSx
vAnD18l8i0UkhVtdn8iePsP0QUNSwvJ/TB6r3l5aUBIHwXuVaEcZxmd5c+hA
NrP/i+X03VbQaGC39OmFWzyoGjSy/aTP7P/Y1+vvF8aCYArltWYfw0O385v6
WqKhG2TKLY7TSDcVHZ8xhQPO9YWzMi4x/lHq8/VLJwsGTepsKqNpnKJTp9Hf
wYfGoIUXrNNpdGxZELUqgAVFASWOoo9oLLOeZnv0axwMWpl0/X1D4/bBzYJP
AwK4+l18lUsfjWuESn3PvsWBvA+cuznG9MOCvzVb2fGwbMWfTw8khRj202VK
1Llk8Fy61vG3shD/VnNO75VOgNJpnW2zNgkx/OD6aQtrEkCsduxj+U4hSqb8
u6zF9IO4cI+LqAeB9/1t590aCAGzk1cNLa4TuOar3x/p96FgWzVFsktA4Myo
+CwZx+tgND536utcAp+V+U0kNYTB1sZHs75WMHl4tCQkypsDv6PyxKxbCJTa
e022SS4cbOVEOx9TBJ5qEC/rcmRDz9SIS+unkHgvb//9Ag8emCl/S/WcTyL/
04DFKkkO2E0rvXVXnUQn1T7Xo5JsWP/2TeKabSTqzGxsjTSPhl7PsxWSB5g8
eAakS5lyIO1B7piqC4m1+m3NW7JjYXnPBkUfX4avzhaJRQXxYE/LoiXNbBLF
KpV9fnjHQ8I6HVL7Fon7qrddmCMdD/UPtba6lJFYZynY4K/IgUzJ6LOCRhIX
jcUWsw3ZANs3xU7/RKLppKPyygMs8N21hev1m8nD7mXfuadioKfo0uEfUsy+
DfowL5QTCat3cXMN1CgcHl225lZvFCjkSXVd16Xwb7ROx/HqCHj9s+WPpBmF
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
hk3qmGvHfP6J8LVxP/ZS2Gt8xthtGR8utRf2Ohxn8lPK8tCZDi7I5Jk2HAih
8EjE9Hvle9IhpGD3wC8BhdV1Fl+tEgWQcuntJ2EuhW1NYr0Pn/Gho/DZb79a
Cv99M6/9eJAP/+QP2Q29ppAXnpx9+HgiZI9JGs6gmPNdXr1OO83k6blrJQr/
KBT/fbPNvUgAlctvm7opMLx7eZZF6WE+yPs9tHHSpjHPVOWh73982Pb5NI8w
p3FvTnTwoAsXpDvMzi6yp3FzgML9NxsT4JDXtx8WHv/3yfe3DSQ4UBmx40pp
Ao0I7oO/pwth5lTN5/uzaJxiZ13yUYsFEvZOP8QraIz0M9rxbFQIWeaZ1dwf
NNbeJrzPbkmCRyu/+WTKiNBq/ZVIpbR0OHc6f87EIqb/IeuglVYy3Dby3/Vn
uQjNjrbUC/emwKL+7fbNm0S4f5+uY3avEBblFNrvukLgwpSvhzq0okDp45be
50kEzrvTvZ23JQzk3b8plOURKLi2VmzS/ig4c3Gx3bc6Aj2ULxFjE1yYL28y
deNbAr3abJYdaYmCvs5ZMnU0gaNmMy5WFrDhwlyDgWXiJJ5+KhJpqPKhdXrh
SxclEsVdKlYZfGT62GTSlKKlJJ4YWd6k6c+GKe1GDxcCk6fNq85q+jE8+dhr
0c+dJGpfYk+WjebA1036YRpeJGYFw6x5wAOXLS+8jwWSuO1vTJrkAj6IQiH9
DYfh1xsXph4cT4St+l+zVtwiMX+twHPNsUTwjpOqcqgk8fvcoioPTQ7cUaNV
Ul4y/Dut1kstnQ0GJnclfn5i1q+lVy5mfv9W/3XGF3+TuPjS9XcHn8fDpmVy
Zt9lKRScfLk5tjMOgjJs7PQ0GL71+NXw2ikO2qzsbkeuZvpbMcPO4HY0eLsb
xP7dSmH7ho749384MKtl/pwPhxh+cIKGB78TQfE5O0vJn8Jc5Y0Lj5gIwXnL
YOnhWApbtaOPRDoJQErjlKX1fQo193BTdqpzQXLSmjDvZgo1xNIbHm0XwEK5
1pkV7ymMU5nj4R2SCJfTN6qqfaeQY3vU2c9GAOSZxtejUjT2lAz8UGxleLqv
NWGBKo2uW/OMgkf40PisssXJmJnH9kanTo4QftGnHWptaBQLPM067cgG3yhp
N9hP45n2OSsb65Jg2OfOHL2TNNqXNRjrx/CgjWprOXqFRtmnI04vf3Jg4lOP
dH0SwwsBuTulDnLBKEkwzXyIRiVOhPWrJ0lw8nqNZa64CP+Te/RnqDgNike/
LY5SYnzNRW9VtBfz9/cUTi1fKsLsea4zGgOTYMv6bSfFQYStz3M8EuOyYOBL
Yc2v3SJc56nkfOgED3rqTFtPuxGo+d3tyLn9YdCpbvCi0Y/AhC1b//RFRkBW
wyRN3TgCM55kWt17FgFfF8R077hGYFo/Nz+CFwsZ78alg0sIXH9nIQZlx8E8
J8fBN6ME+q8+eyUpieGvCsU0chqJpTHxe+2qk0Aq4toTI1XGhxYunbBezYFE
odSmUBOGbxX3J7Q0sCB/n4ZBqg2J08sSlCV58aAWphH5wInE16zZZR0+bBi2
s6Q+JZN49UVpfn1FMnjvKFis/ojEnXdf6u1sZUPQBv0gngSTjwGltnsGoiBc
LWV/4VwKFatK7TWusEHzaGeBmD6Fz9y6Xs1YFgsFyp4LrHhMn2/+3FzA+BMo
FbbQtymU87Ab/Teb6V/ne+9+Vf///tnn/Cd/BeCnEO645hWF149t5iZJJoK7
mphmpwaNXiENjpMT+dD/6VumyWoaX+jJR506wQejodrzidtorFg/fWxtVDwY
NOU6f/ejUQ0eZlLz2aBnNORmEkcj/9L5kfIYAeif//vA4T6NdzJvV3UeEUKH
edHw8ac0rjCy6e7QTwSjjylpM8ZofOD3eNYq8WRonFY0SVdahP0n+5tuLk2H
ysS8zs2qTJ6JN7+RIpNg12fTJN/jBL4LwHkLkyNgw5hRa3oIgRpvPLOU7CLh
qVX7zo1Cpj+nar9PuBwGFl+szdfmEJjLga1bWdGwRIOKmUYSaHVC2n/rXjaY
xr6YF/6PwCUXRMarvPigzHf+9UGBxBabrnrOUxa8kR1y+adNov+iSU9nOLBA
6BL1YyGLRPLnuzJF8UTwMREvistmrq+jY3S9ejIo315c01FOYkTZsS1/pnMg
yb4/tu4Hw2+3evMnlidA5PJA640zKSyLMV1kHxILmyuqt+apU+hkX/0utiQe
+gsn9bxaQeHVKbFNc27GwczBLyV+mykc2iidaveDDVoXM0c9XCl0+bTqoMZX
Afw4pmqjfpXCzNXO9cHM7533YNPSpGIKJx+4YnbxPhdW5S089KWRwiUbZtbY
Msfn+//J7TSkcUhl14CKrBBY1LfD09fTqHekTHEZw/eJafwjZfsY3r+28Vt3
91WIzZt4XnCcRpU59oevT+bBvSCPsvIQGmdpU5krzNjgHX+BWCekMQ267hnd
50NU16m8qXUM3zeEPtTOugpfbX/NOPKGxoPPe4IEy5JBTzfsWwRF4yY6WGtm
WRJMbCxX0xQToXmw+unZzP4ve1xUOktRhBL6C+aF70+CLInC5mk6InzjfaDS
NyEFRnPnfTLYKcIQyZUc6wYezH9dvPy0J4FT1CpDX56/AqxYw5cmgQSOzPi8
fvGRCFg5WWS+ikNgiIqU07h6BCROHoy1uUFglPpKUcrFCKib/2bPhwpmPvIi
VeKZ+bh1/1pMYj9z/vXcrc1F8XDz9OzLBr8I5D94I6FXxYKCm+V2AzNJvCvo
tTj7lQNDzU8UEheTmLrLTa1zJgdIpQV596JJTBDfUqHezoX8derPV2WQmBmI
rKefkyHo/b6GvmISBW+bwsL2cCH81O+KK/+RGDySfc5/PA7ELXYfHJKi0CRr
gZvGCAtIUe7uuyoUNh2qP9wilQBT4n1sjhpTKFOwQbtMJQbsv/hOO2pDYW3q
1dbGeB7saS++6+vEzNfg4pBNPXzYZW1VeC+Jws5zD6O2NvFhbPDPhOVdChtl
S2sLnwogazKh8r2ewpstoYIEYx5EyFuYX2un8KDbh/mDpknQ/zjn5K1dNK7R
ll3pZM6CBt1rUOFJo4y8kzQpxYHNvcU3VnFoPHJGJ0teXwidumWmdyuZvvCz
6x//IwSPeodLR1/SGHP657wlj5NBc7PLk4UDNF42Ka+79yYRlAR3euf9pnGe
UOO1WX4S1Bwx6VKeJUL5/vTYF9rpYLT17s6cxSKkn/WvedOZDPE/iydO+RKo
H/7BOdssHH67GL+aFklgkJ1Fr1txFLiG1B/dk0pgGa9xi//6KzDQfo0yLiAw
OX7y36DZUZDOMY0N+EKg+NY+Y+UEDtRmxdzrliSx7r/3XUXWPIgMkbjdPZfE
6h8bd6xZzIfK3Yq5HgbM9fP4tDxFwIbB/pUnsy1JNF7zvZSXFgNmt+6o+DqQ
2KRzN3xhHAesb41bxfFJLJ7UEBiSIQQDrT7Bhzskrq6sTvpfTWceTVX3//FK
hIjwPJoUJYQKGSrKZ1ekCGmQOUKSJGMDQubx3utO5iEST4OiQkUIlZQoyfBI
CveccxUhJL77Wev3u/+dte9Z69y99+f9eb3W2mddoY9sqLrAr2yrxvd/DvnR
YMCAh/foPLP3BAp5vL10YjkDluakf9SZI5BO7Ebb0OREENtcqJwvjf1pJXX+
Vy7ef9Gt+/9RJtG1HdEPZycToO4D03/XLhLp3rq5WL0hFn6tY+ywcyPRUfUA
k5HnXMhMne6hF5AoRXFzf+sONrgmc2y+V5JosE8wZVQV8/zR4zd4LSQycmrr
8jnBhvFDWTdeylOocCysfbiEBf4bgn90a+P8p4jNmtZccBv5aRx0EPvV+MqJ
EDO8/gFXHV84Uigo67q7EIcBRzVOOBX5UijFnKbwfJYJibv2qBtnUuj7yW19
jTi/9JLVlE42UWhVZ4XaBwcuhLZmZZ7qptC9Zkul3t0c0BYuXvfjB4W4XQxN
jb40+PK76ZSWIB+dpTJlTeuzoHSDNn3RSj6qW5XfcdGDDR1aBzMbT/BRi5nR
G7sJJryCpO9u/jwUEB9i2PpXNNi2hGtxmrBv/XwmcHwgHurcVMln3Tx01e2W
rLtNItSe/aYSNspDN/3rdf38UqGw23Rz4zlcj35ygX06THj3OUaqP5xA99V0
mjTt2cA90hFM5xDILTE3Mf89B4ofnBFCHQQ6I//kH3tZBvBfNgz7EZg3J147
8nC/eGWqbWmwgEQqVQ5TptIJ0Jf/1rwymEQWxc07K/xxXmyoceilkWjhQcXv
Gi1M0Bv2nnL+hvt3s+j7ZXVsEIpNkI6axutTusR+Evup73PncDtxCq2w73TQ
U2OD2WTr76r/zm++kmQoXmLB2q9H9Fp1KfTDMU+PIriwzjPeZ76MQh+tf1eq
KLNBXOetv60G5iWrQwI2JVwIO7SzIGwfH02V/fKJa8qGke7Fv608eUhydeWD
07lRUAFPyfxBHsqU/HTTcAcdZJo37VhzikD3Jv+VW+FBhyXVG+NeBhGIbHs+
FFXFAVVf1+LHiQR6pn+Zdu4oE7g57SctP//3f6Yfh7xGaPDORSvUdgLnp+x0
siiRDJp7rxnWRmOe0bmn6qPMAS2/gLgnGSTSYXj3WISy4C/a/aGA7zivnrCX
Pl3HBOHo+9vcBSikFOIo2WTGAs8LCT3SKyjk07AvwEWJAx1ibn7y2O9vZc/K
NM4mw5WWP86l1RQaF1N3c1NNg3sHbtCcsK931qxLyd1TAOUvIzlHsK/zi48a
vD6A98vAAVbma8yLcSueTbyJB4N2P1IT+7aP37cTkZnxUHtHKa/aAT9/YcQr
RggdPrze3t3kS6BQ3cfFXrI43zdNOphjXz62zCbLKCsVckuyy0ywD7dfkzDh
b6CD09/B24a+Yz93+PMn7EkKmO+138YWJJHIzux9hvIJIOy3af/TcBJFlL2W
evA1E5JN03+aYX+lsxzNapvZoPxE8sdZgkSrnzyfV/bB+2NJzvWAOcz311Zx
NZw5MJI+eeeRFIW6kivtef+9v55nYfhYmULRRY4OHbdZMD54ZIUB9tE1goKl
B1ip0LJ6H8+6EvPZozO3IsY44FRTtcgB++Hze25G/Kl0cGn3tFuB/fB5EPlg
zIULluUxCvux701GsqzsMN/bSnTZFnXgPL583u/EfBxo3RGipLHv9f2wTla8
RAePIfV3lzwI1PLH0qAH+/mOu1J6zcEE8s8t1BN1YcHHqrZxFexnFpK84hXY
X1OYwstOYN+6Mrqv7co+Guy7O/yiZYZAxU/CK9OdUqDk7d6bnkG4PvwfLQye
YIOtdK9eQwKJPidyb626wAYB16N9V8dJ9Gh7PigPsEBUsLH+OPYd29zNh+Wr
WDC4X17UR45CitIZ0CnMBvsps8bHmjivjsBQA54/gff0tS6GfGSySuNmZWMB
qPQ1v9yP/eLxHdFFXw8xoWBC3Gc19gm1n/Git3bHQJuj4t7YRB4aS1E48WI4
BqpDc5TLcnmovv6undyvRAhebt/fXs5DIoHxSUabkoG9BpRNsT/wWrLzPoim
gVf1mn+vyRHIlP+vxJpCBpxkNvb2axFISmTcLekJDaQUPoz8MSbQJfvwFWVX
koEjv/GDBPYHuvbovbEzdLh4qNFbH/tDY8q3ouNK6eDBbywNqCfQNYOrQesU
GTA1dDFrOfaFezyv6gX4+yWCIqFH1El0tXPh2nK9RAi1di+qQiQ629S0YXwu
HsRPqnzpO0Yi5utdV+VkU8GnW21s5gyJ+sbEB/o2sWD4ypDwHuwTQtlK+asN
MC/HqdHtsE+0OQyRjVs4wJK2yE5uI9G3rxXJ7gQHdpZ9vTxpTqFHDnrC121S
YHDL8pUHsC+Evc050lpEBxNbVgYjkUJn31b7FZ9lA7VoOn8il0K9qxZ1KZjT
4b2Y7V9eExQa8wyeOrM1HYTnXG4kiPBRtn7wajOJbFjmclssT46P3tyX0a7q
SgOJl5K+o+E8hBq+br6pHAsz3TM+N9g8xN26KKI8MxJErWyis0twfzCvzXPu
jYf1myqVuud4yKP7Wg0UMMH7V1zkHsz/G52d6cpidNhpcibQCvO/D+WXGCNO
g0ntaN2BAgLJJ6iW1ljh5/Ehnulj3hcbuXRDbyMD2LorhLPESRRes390bXYS
PAvLTBHHfO82vnvpRE0yeBza+o8S5vv9AvtVGe7JMGVyckGHKYmWHTzuNPiQ
DreLBL1eOJFoeP9UU815NhxXCHcbKcPrpXpZX0mCCcad3JWWmOeLrT3niDQ2
6JDtPId9FFqcfPlH8Uo65LtUePyN+b3vVISYY28WaO9aPrcc87ufZoY1tzYV
PAde+Ypjfj91ladzuIEGsRXrFXLYFFqrdfNVlRkb8/w8v4ug0OXhiEDp3DTI
9Q1Ki5zHebL6smRfWRZMvi6ddVDB/aN2jUevdCbYOklciA7mIfP8L76qgTHg
niVhy6HzkPtG5yyLoBhw9ZjtuFnIQ8zbC2weRsRAttXOLTqYt0+JWKnuCokH
luRc0rVpHlr8M3FDEearRaLfPhhjvuYoHabNv0kFK4G9quR6Ao0s9wupcWWA
LrphlZKD+8u8YuV3fjp4Fsk37cU8fTtLxzkmPhUixKVMPr0g0LzMh8jZlCSw
L49nS2B+1nry69LvyBSI35Qp81STRKfqpjIkm3C+Ww4ceWGM81dcLvLM3yzo
FZBVfm9Loiihf39XYH7OMdfW497BPF4jfGAikQ33NVw+HMO8bDU3+2a7OhMK
pZaEjX8k0aq64/opQ1wYiX9zQQjzMjNpBGc9DbyrHnivxrxcd9lA68oSBniI
2P/LpVPo1+tHAlf1OcC0iuC/aqWQ1rfVZNu5dHAv7ar1/UahYomZSbjNhaoa
D+uLM9inMjlJ+hJpsMB+ICx0Gebjt8fU7BqzIUL2buT8ej6SjFtSUBSfDs+1
pPzsY3hI4PsnzXMtcZC8ajDmQQYPrWG0/7mrHAn39R/qMO/y0EGvx4JN/rFw
F/nXaGH+5YgqOkteYULX1y3bdmP+7T7stnR7KhPkk1LqKjcTyGRtyqKddXQo
7Z8UWIz5N/Ho1nUr1yZA+nnbf9uPYZ+pr3Steox5VsV9lR7mXQ+VvRYsBQ7c
2F5ete0/3s0bfqezkwH3D90MzG0nEGuAfLNCkgFrtgA5KYXzJN/F6ZUuDdYf
uhO7FPMtx+j6jJZlIhhfqEM0AxLZhrPUfPixEGI6XvrEFfOssU2Ul3kaiI23
pO7DPNvS5qAccJ8BPVffOhzEPHu7OW5pvyIbREfaX708QKHg4z/sfksw4PjO
fCclzKvNJQu6J52ZMFvjlSSMeXULr9fN8TMTbj0tyjkfQ6Gq9QpZEZpMuHma
d6owg0JGrauvcLHvLDwhI/ugkULs4gM9uS/TwN9LcdVezKv+yWaritrTIHpj
dDdtMR9FNS31y67Mgh+yX3VcV2B/Mdpx+NBPFnS1bUvofIH9w2ZBwaF3USBf
a6Am18tDVaYv1AtWJcFI0h7BHE0CGTonqt1opEHPXW2fWiMCCUlFZulJJcM1
G8XzFTYE2nOrM0of18uobBNX6DyBIscP3r2FfeWP7yk3g2sEkmPmyuzD/W1w
7OFoxEcCPfZ3df31NwNEHfwet5IEGlUoRH2uNDBfud8gCEhU1eFG0xCMhZWP
qNb8oyTqDJhOpTMZkN2TMp3vQaJclUWdeRQL++2g2UwIiR5kVydFl6fCNgfr
wIJBEjV88/rtaseGxtM0vdoZEvEfvlT/5ZcBkjONifeXUWj68wOZNVpsCLsz
IHo4gULHFs2n3P7DAuOFQ6ppORTqGHoyK1ZIhzzZgysyNPnos8Oo+UgVF6a8
hRiDRnxUbflu7Pu7DAgU6FfeXc1DawfSetePxsPlWpeXD/QJFP6wqePGOgYk
7tjuVmiBef1CWX/bfjpsYqjm+LkSaI4oO3j+Ch2OzuSOi1wiUMM5w/dqYpgX
e+TNGP14nJN3PmWcBiMTfZaPJgmU9/VEvdRUMrwQRSzGQRLluKrbFQ7ToXLu
pW2CI4nKj4QrrO9hgcGjtF2LYkkkN/S5X0OSDaPLD/MW9OD5iGNfLHiUDpKC
GW4VP0ik/X40yTguFV64PbLOX0yhibUfXVxVWSBc9GPIcyWF3FMvhBhJcuCZ
2AWaA4tCnErnxvGvbAheFkQGl1Bo1spO+vG2FEhzKnUUUuaj68p622ouZIKR
uoJ2rj4f1Xw6oBkudwOO1i3q7qngoQt3RerTpBKga/g3v7eFh4YPmDyUcU+E
9C3RaslfeChIuchUdiIeyousTpfoEijQwtVRZoYGHwKUl/ztRCBdx+YOlxg6
rBcpNxb2x3zy5te7Dp10+HeIzI7vwfkQa8LjtdEguHiT0L5RAj1omKAeBaSA
mNTz4UgjEu0W7ixD/53nte3+i2NDomP77z8RzcL88HG+e5E3iZ4arvziyEkF
qSFDo7kIEmXV769vt8yCfqm0JRkd/50X31LCjeHCes3pc3dIEq0o5EuHYT9t
HLzedG+eRH6+OsvTBNmQ2GpXtUyGQla9r820mSzIdSg5ZE2jkNePte5i6hz4
vGTr0qWF2Cd7z0/IdKXAxpI7g0UK2BdTbBczdNPhZ57OjSxdPrrxqm9s+nMG
9IzrHgg15SNtbw1P82wOcPfV+OfU89DHMo8wxgJcvzKJZcMfeWiQsftPa0kc
DP6O+u6kTiBzpXqR28/osLvbV60WCOQ9rRqrZ5AArnOVTpyjBAreNmYs+ZAB
IXc26707g/NW2SwtwpgJUWRS/tJQAp2nrdMSMGTBragPtP1tBJr01O5X66bD
63fHptMGCbSyqjXrlQgNLG/K9ejok8hG9htZxouDSIFqlGtBomjj5GYjw1SI
y6/IuXqKRKVT4U4KoWkQ8qYvt+4iieK1vGfcn7Nh4XKRZvd+nK+rbzdvUuLC
fKeBQ90EieynfbrOPmPDq6+vhhgiFLrC3UQXHGbB58d67afSsS/EfdYPbWaA
+F/3O1zV+Sjoea6zwzQXOA/F6vKBjxaUyZ3KMS8ApYaCamlXHvIvtZE7dD0K
pCzNNQIv8tCHNS/CjrXGgFr1he7wCR76+rt5S94SXC/WPKl4UQJ9DZ+5uGuG
CwUWSvd61+J+z32jPGvAABNGwLmdJnh+pbPlj93C/HSw+jQtg0COYpfv1Ell
gLcRo8pwMYkuef+2UcLrIWX3dPXhlSTyNLsNZrj+89/cHri9mURfWJscrf8k
ALv0MpNTQqK/O6b845exQHlTzsWdlhTifTpAjbgmQ6CbSUHeRcw/j2cvi36h
wT+3YyLEWyh0/9PMroFTXEjnFURJefMwn9Q37p2PAaPvQ2KaCwg0lvzosn4t
C15qbfMJl8H5fFbCQ3EbHW6p/MproRHoTkW07ZlqLgxqhm7dfoNA41a88P7y
NND4Yl9zqYpA12khxRwpBlzU/hL2cxmJwE7BIso9ATp/fhY/tAHzX+zh1Iun
k4Fq/bSjNYdE7inj1ta1bFh8XGZ07wM83v1CQouRCgQp/aXCiEL5MLm9opQG
KZ2+7ra2FDIR2MpK25ADg3LDeRbeFGqLuTv/W4cJ1VJxT+7XUWiy68/q7qBc
qK96kyP0kUIqQYN2QUvTYaRBeFqbolA9q857/nEalD6d7+4/wkfdZX4MwWtM
OPlRcb30GR4K9PKc2m4ZBU2VFpr9ITxUellDK9Q7Bio61P0/zfDQgXWiS72F
aOBglFwbJUGg2V9XXQriGKC0O9v0ay6BsirfDJp2pMOYQVVWmgjuN6MlcUrZ
dAhUfitjsZZEz57t0XafSwaT4rnrJ9NJJFyQs/UdmwVm15rq+HdJ1GX+1Ev3
Ihu6F8SdP3iMQl+InuuOXXSQz0iUsjlDoeqWw4L2mxgg6fx2r+1TCnXrSsXt
WcAFPW215aJtFDqx8KNJwJoMGBwaeP16kELfG/4JDJjkwvvfirzlfjz0peXL
tcDhKDB/tuuWyg8ekmVy5MsbGdC+5HphrCD22z0792W+ZYKOfOfakJUEkowJ
y55TYIHNBTf+TjaBmrgnul8d5MCbEqXKCzX49+uw8y/uYMCsmqjrIRkSiR3Y
tnV9DQ0Mno0JmaqQaEBg3FZjJgFoU+VvDQtJ1L3hnyFfeTY8G5GuVzSl0APl
hqL7CgzYW2rv4OlEIXFF4SunJ/B+y92raexHobSDuvq3vjPB6/kenaUvKFQj
rHJFZIwNFsh3i0APhQwk4p8uf88Gxl6N1Es2fDQqeFi1C/OvRLn9YVcnHlrw
f59R0+vL2vH4/1//Dwisxww=
                    "], {{{}, {
                    EdgeForm[], 
                    Directive[
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    Opacity[0.05]], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJwl2Xegj+Ubx/FjHDsts2TvGVFEhCjZe8smlL2y9940rJaKJGnRoIzK3llR
iqJUtsz8Xle/P073dV2f9/t2zvec7/Pcz7dc7Xs2eD5pQkJCEl+vpv7/ujj1
/+tS6kXWzxMTEp5NlZCQNllCwvTkCQmPpUxImAh81Px3dU0brJTvlA9LkZDw
DW8kb7C8oPlyeXHeMVkB3h++nsNm03fAHpG3lqezV1NZHW567lr9fbJX7bEI
Xws/F/+C2S39e/or+gL4z/hd8Z/xh+EryM/Yo6Q8jXqavIJ8grwdvpzstP5p
e72P34EZar9N+HfNiuGP6vPjy+F/0c/C/66fiu+Bv1/eHn8Y30qeVt5EXht/
h/2/1GeVLcYvxNfEz8EPNrupX66/rM+PX8Pvgl/DH4ovL//DHg/KU6unysvL
x8vb4svKTulr2Gu7fIi9NmIHmRfgLzM/bi3K+0GWj1eW97N+Ju+0vjvvPlk7
3su8J/GHeNesLXFpcI1xtXjp5F/os8gX8J7mzeY1M0+JH2S+xXpD9q7skmy1
PTpzVsffivnv2BLmn1m7YlOZ3WvvKbhHceNwj8h+Uz9lv23yF+y1gTPQPD9n
qXkR/BHzvPhTvrrhsurb4l7CVccdxF21tsCmtl8jXFrZ5+rMsvmcGpxZnKbm
KbADzTdbr8uWyS7KPuV34nwafwfmp7HFzddYu2BTmt3jZ5iMK4cbi3tY9qv6
SfttlQ+213rOAPN8nHfMf7IW5hyW5eEcV8/g/KZ+lpPF/BnOi5xq2AOcf6zN
calwDXFpZJ+pM8le4TzFmclpYp6IHWD+nfWabKnsguwTfkfOJ/H3YH4KWyx+
V9bO2BRmd/t5JuHK4sbgyshOqqvH71g+yF5fc0bg+svy8t6W/WgtxDskz837
ST2d96u6Ky+zeRvedN483hP473lXrM2wKbENsBnNXsY/iZ+BP+/r4/jbMPuN
V1S/0B6fqjtxE80n8h/hj8ZVi9+j2UD+V9jh2H7YPNi3ZAWxB2W5sCd9dcFm
0rfGTsPOxVbF7sdetjbFp7B3fWwGs5fw1fHT8T3xjfHJcf3jb072juyc7KP4
W9D/Ki+iX4D9RN0Rm9z8Lv0Eez9s71HYJ+L3ZT6Avw4/TN4Xnxu/RFYAe0CW
E/ujehrvhHqKvDMvo6wVbypvDq+K+T5eE2with42tfka9b3mi+Qv8qrxpvEa
yZKZ9Yu/NfO3zc/Ga8/vwPmQP0ReRnYSW1iWTD1eXkY+Ul6V+61Zf+5a+Zv6
/PLv9Tnid+h7O6afiv9FP9l+nfAZ5C3xe/GN5cnldeU18an8W6v198jmYZ/A
TsX2jX+Lf8XsLbO/zfLhP+K3x6/il5ad4BeKn8PaAZ/U7E7cOFxp3AjcM/rS
8hP6Kvb9BtPPnl/y+pjn4r1hfsyaj7dflj1+v7yj+im8n/Ud45oma8GbzauM
38O7ZG2ES4arg3ual1L+qf5u+VxeVd4UXkPzpPg+8X1YL8uWyP6S5eV9aJ92
vA/s85Dsl7jPxj1cnV4+Vv6QfHjksl/Ule21Sd7XPl9ge5vntPfr5keteTn7
ZA9wflBP5hxXd4jrm3lzTm39Xfg5ZlXMJps9799rYK8k9ugd/4b1kvxN+Z/y
VfZqa6+V3FLmP8f9yXx+/J7U7VPFH5H7pX4MthR2WLCyn9WP23OjvI/9PocO
xfWS5eC9JvvBmoe3V54trjm+2sc1TN8MPwU/C/84bjf+orUhPqm9a2FTyD5R
3ymbzavMm8TrFaz+Df0Z/fvYkvrjcR/SvxK/B3U7+93GptOPtm9Jew0NVnZc
XUm2gdfbPp/xhuB6yrLzXpUdsebm7ZHfzzuinsT7Mc4pcY0wb8qbzJvJq4Tf
xbtgbYBNEucvbKLsY3V62Sze47yJvOd49WUJ+J7xWlovyF+X/2H8gT2e4a2w
x4PmP8U9Ks4DvFXqtvh/eWn1o7APYocEK/tJXVG2ntfLfmvibIZ7XvYAb7Hs
sDUXb7f8Pt5h9UTesTjHxPvQvAlvJ7a+LCHOZLLk9vhIfYf5QnvMxFbCToDU
k92WxcH1vPlr5r+br+S3MX+P/wKnhOzHuD/Fz2l9xuwWZySuBO4FXAnzH9WP
ma+Qf83pab/V8drJssXZU5aTs8s8K+doXC/ivaZvjNshrye/ra8hS8b70J7p
4qzEn4GtKBuPrSv7V/ac7Jz5q+an4++L39p8OX8wp7jsWNyz4ueytjG7yRmB
K44bjCtufkxdwfw9+Vec5+33adwfzXJgd+qzxD3c7+WQfgL+B/0kfJt438kb
4bfj68r/1T8lr4FPav9V+LRxXsJPxz8mH4fvYXZWv1h/Sp8Hv4LfCv8ufxC+
mPxo3L/kN/DD5cXkg+Rt8MVkR/XlZcvx6/DP2e+TuFeaZcfv0GeO6zj+oH48
/oh+Ir41Pp28IX4bvo78lv5J+VPxLGP/D/Bp4nyEn4avIB+L7272t36R/jd9
bvx7/Jb4ZfyBcXaW/xDXfvl1/DB5UflAeWt8UdkP+kdl7+LX4nvY7+O4vpk9
gN+uzxTXYfwB/Tj8Yf0EfCt8WnkD/FZ8bflNfXX5k/gE+6/Ep47zEH4qvrx8
jKib2V/6hfpf9bnwy/kt8Ev5A/BF5EfiOi+/hh8qLyIfIG+FLyI7oi8n+xLb
3V4fxbVNnw27TZ8xrsXY7/VjsYf0LbFpZPWxM+xR0b+1Jd6L1lq4G7JquOq8
2/r3eankU3iPykbz6vBumT8b10fen7IFspPx/MVpLnvHHoXND8f1Pt4j1tbY
q5w09h6CK4zrH5zssLqs7AtON3t9GH+n5vdzXjY/ZL2fs1WWgbNfPYZzUN2C
k9q8XpxPOY9hN8d71FoTd132BO5f9QpOStlkTjnzUXFv5Nw07xrXQ84Z2XzZ
CdkyTjPZ2/xC5ofi+m++wtoK+w8ntZ/nBVwhXL/gZIfUj8g+5zxrr1Xx7Ijr
LruP95LsoPU+3hb5vbx96tG8A+rmvFTmdXmTeNN4FfDfxXvX+jT2mrwq9pb6
PV4K2SReWfOR8frxavFuyLrIvub9IX9F/ot8Ka+p7C17FDQ/GNf+eA6L95O6
ZZzPeINxBXF948yk/wzb1R4fxDMrths2a5xHZVmxm2X3YPeqR/G+V4+P5wRe
Slkd3kTeVF558295NbBXZVWwN9XLeYlxXpdP5D0iG8Grybku6yz73fxl85/N
3+E0MV/C788pIDsQ9wDZZewgeQF5n/hZzQ+qy5gvw67BdrHPSuw8syzY7/R3
x1nA97lHPxK/Xz8uninwKeS18d/gn5L/o68czy/4G/p38cllL+In4B+WD8d3
Mjutf0l/XJ8T/za+Mf5Nfj98fvn38bcvv4QfKM8v7x3vX3wB2QF9adlS/Gp8
Z/u9j59rlhn/rf6u+Jvy1USeqK8l3yR/Un5F/3g8t9jvun6Z/ZLJxmPLyIZh
O+q/sv8psxfNfjLLgX8L3wj/Bj+fbH/8TcuWW1vgL/JS4Qbg8uF6xXtUn1/+
vf4h+ae8TvZcwXvWPAtvjvkBaybeN7I746zC260fwdurb8xLLqsZ50Peo/iN
cT+wVsddllWKZxneNf1SXlL5OF5p2VBeB/06/G9m88x+NMuOX4JviH+dn1e2
L/6uZRfw/WV5ZT3jvYnNJ9uvLyX7BNvRPu9hu5pntvds8++tGXmbZOnjvMLb
pR/O26NvxEsmezrOiLxy+A1xb7BWw12SVcRV4V3Vv8NLIh/Le0g2hNdevxb/
q9lcs2NmD+DfxDfAv8bPI9sbr3Fcn63N8ed5KePZGpcnzmO4Zvq88n36kvKP
eR3suZzXxTwTb5b5fmsG3kbZHbyd6mGc3eqGnKRxlorrFqcsdj3nT+sTuIuy
x3D/qN/mJMjGcEqZvxD3dt/D07xrsnZxb+OdlM+RH5W/wasve9Ueuc33xOsd
n7Xwlqmb4c/xUsTzNzZ3nNfiNZDtVT8o+4jX3n7v8gbiOssyxjlVts96L2+D
PB1vh3oob5e6AS9JnLF4E3gTeY/EuZN3xloVe0FeAXtF/Rbvtno0r6T54Lj3
82rwrsraxv2Od0I+W/6D/HVePdliXi7z3fG6x3WJt1TdFH+Wl6jvg82F7RGv
hWyPuoTsQ147+y3jDcB1kmWIs6xsr/Ue3np5Wt529RDeTnV9XkKcwSzj4/MN
3sNxNuVVwZ2XlcddVi/h/KueJx/Fe1A2KN7LvKd4/8if4f0imyU7InuNV9d8
Ea8vL6dsV7z2cf22NjH7m9MblxPXPV4D893q4ubvyFdx2tpvaVyfZPfG2VZ2
N+dr8zRxtvY9bNO/wNuhH4upx7uNr85bh68sP4d/VF4Zf0n/Jv6Wfi5+JL6E
fCC+Df5n/Uz9YX22+IwdXwe/EN8Hn0O+M15n+V/4XvIc8m7ypvicsl36YrK3
8R/gn7HfO/G5ldld+K/0qfHF8Fv1g/Hb9WPwdfH/2qMafi3+cflZfDn54/iL
+jfwN/Vz8CPwxeUD8K3xx/Uz9If09+MX42vjF+B747PLd8TrKX/b2jjOdbzk
8cyLzR7nvbiX6HPId+qLylfy2tj37fjsSn8ndp0+FXabrzryW/F5YfxNWcvY
90vcH9ZK2L+xZXEX1K/b84Z6OKeYeX/Ok5wr5q3iLMX5STZddlC2iFNLNp/z
gPl27D1xD4x7lLpRnOV4yeK5FvtAnPGw2WU71EVk7/Na2+8tXn9ch9iDN0W2
x5qet1aekrdFPYi3VV2bdxNblTfOWhr7RZxJrBVxf3EewV33NQxbVN8PeyDO
6GbZzLbx7tYvsTaMsxk/qe/hOX62OLPFzyXbri4cz7icVvZZwumHax8+b7Js
t/UO3pfyFLzN6oG8LepavBvYKvG9xmdM6ofwn8dZxPoY9k/ew9jz6td419RD
eUXM+8Z9jVedd1nWMs6AvB/l0+TfxzMrr6bsZV6vOKvLtuLvks2J+5G6gfnv
3B7Y++MMF6+D+TZ1IfO35O/xWtrzTV5fXrvYw3ySPB3vC1ki7zv1AN7muL7G
OZ93HVuZN8ZayuwzTgXcGU4Z3Dn1q5yr6tnyIZzCsj6cFthj+qn6/fr7/NsL
8E/jX8L3jLO6fIu975SfxneX3yfvFOcS/P2yrfqCsiX45fgW9nsjzrtmafGf
65Pji+K/1ffHf6cfFWd6/LX4vAu/Bl9e/ge+tLwS/qx+Mf4f/Sz8C/hC8t74
5vij+in6ffqs+Pn4GvgX8c/js8o32z+9/BS+mzyrvGOcRfD3ybboC8jexL+L
b26/1+N+F89t+M/0yfBF8N/o++G/1Y/E18Bfjc+58Kvxj8p/xz8kr4j/W78I
f0U/Ez8YX1DeC1+Nd0nWjLdG9oNssmyvLAv3Fe5T8nncLLLv8HfEecBaP85y
vCS4Z3FZcB3iLKLPKt+szx9nfV4ze74W16J4bsOu0SeNZ1DsJn1f7DfxGQT2
n3g+xvaM84/8Cf1FeVPuav/mEcwk/h55ZvnL/Cflc/mZZd/i08U93Vovzmi8
BFxXXGZc+zhT6LPIv9Pni/M8r6k9X433apyjsav1SeK5ErtR3we7KT5nwF6J
513sp9hystPYUrLHsH/pF2Iv6wdhC8iex1blXDBvEudw39dh2UTZblkm3ku8
6vI5vEyyb/Bp4/5trRvnMd5taxdcpjinxdmBl1n+rT5v3Kt5Tey5mNc23jP4
sea7rCl5n8rif1hvUPfmbIzPHDiX4zlXNNpaEvsJ55S1LO4UpyTuT/UCziX1
QE5+8+c4nX0PVXjnZY3jXM47JJ8g3xVnRF412WxeRvNN2DTms+N+rq4TZzHe
v9bO2IxxRovXQPaNOk/cu3mN7beI14f3TLyf8GNkO60peJ/Ib8vXq3vxNsRz
Ie9SPO+aj43PY9UP4j/m/WZ9BPsb70HsGfV83kX1AF4+8x7x7MirzDsnaxTn
c95B+Xj5zjgj8p6QzeJlMN+Y+N+fW8KsuN+ra+N/4d2ydsJmiDNavBayTerc
cQ3mNbLfQl5vXpt4n+FHy3ZYE3kfy/+Vf63uyVsfz5G8i/E8Ftdf3kh1CfxH
vF+tD2N/5ZXA/qF+hXchntV5ec27x3mO9zjvrKxhPAvKxsl2yGZin4uzudmG
xP8+Ek+YiV+krqX5Gd/Rvvdy28TPb75Rncv8DfkSXkN7LYjzULwv49wa5xvO
R+a3zL9SP8/5mj8izvOcC/FcJhthLW72IacM7iSnOK6C7+F3/cu88/oZmH68
PPJuvAbxHKgfq9+uz4ifi6+Kn4HvEedx+frE/z4+TziO7yC/R9NaXg9/r2yD
Pqfsdfyb+Ab2m48fGecb/If6m/EzxPOi/Hw8e+lXyUvLT8iLycrb77T+Jfud
00+3X198bvmz+PrxfKcfo9+mz4Cfg6+Cn47vjr9b/nXif48KCT/h28vvjjOa
vC7+Htl6fQ7Za/g38PXBr8TrGGcc/Cr9DX1B/Dr9c/h1cRbHnovnKtlwa7E4
K3NOWh/C/cIrinuUd0r/Iu9snMF5uWRdeZV4f5vXi2c93j7ZaNnWeK9zKsum
ce4y/yrxv49qExb6T80403BuWtvh7oqzDu5u2dfq7PH6c+rZ62VOq7guYoeb
b7cm4Xwgux5ndHUPzto4n3POxrOU+TBrUexKzglrKdzPnCK439TzOH/HmZyT
07wLpyLnL/O68WzH2SsbJdsS723O47KpnDvN12GNEhZYn8Ye49ywtjW8E9ci
fm7ZV+oH4vfDqWuvlzgt43qIHWa+Ld5gnJWya8ov1d05X8ZZhPN3nOXNh1qL
YN+PZz1rSdxxTmHcr+q5nL/iTMjJYd6Z8xjnT/M6nFWcPbKRss3xnuZUkk3h
pDdfm/jf/2JMmG+tgT3KuW59Bpce1zx+btk6dTbZq+A69noxznRx/cMONd9q
vS17X3ZV9gW/G+eLOJuY/xVn+LjvxGfT6sL4FfHcZ30Q+xOvEPakeg7vzzgT
8rKbd+J14FXgnZHV5n3A2y0fIf9OPoNXUTaZ1y3O6rIvE//7+CNhRpxv1E/F
ucegDfaOOAth79cvxta2zzxsL2zzuP7F+TXuVbIVsn9kn/Oe5X0ez1Bxrpf9
GWd92aj4jFpdKM7YvBLYH3kFsSfUs3ln1NPkz/MekHXkteeV5/0hrxX3b9lw
2bfx+Q4+nf4L+f8AznDZag==
                    "]]}]}, {}, {}}, {{}, {}, 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    LineBox[CompressedData["
1:eJwl2gW01dXWhvEjbdElkirdnVJSBiAd0mDQpaTSLaIiIN0oEkqXQTcoGIhB
CAiKiiJKC99v3m8Mz11zzvd51jkc2Huv9R83V4eeDXvck5CQMOfehIRYP06a
kPBA4oSE8Zo9+iHJEhK+0D+TKCHhYvKEhIryDthOsmyyHrI3UiQk/IafLD+b
JCEhn/qkrKh6BS+/fBBvOK8k73f147wh5luwnXlbsNdkK3l3ZIN5KeQtsL14
U2V1ZXNlD8ua8x7kteH9oK+DnYF9E6tN+ET9ILaL+QRsZeyb2L2yofY5Ilsl
qwv+TVYJ35H7vDy7vKf8d947snO8/OpT5sXUP/FW8gpYB/NG8Erx/lBX5n2M
7cL7GHvd/EPeXfMD+Fd591pbYqfJ6snmybKaf8ZJZd6Cn1Ldln8T+6PsSetM
GTThU2tKxeu4Kri3cPvMh9nrqPlqbD3O77LHsS/Icsh6yf7gTDH/mVNAfdq8
uPoM50NOwfgZOaU5l6xVOJ/gunI+wd0w/4iToD6IfY1zn/U57LvG9WXzOdnM
t3JSm7fkp1K349zCnpA9ZZ2V9H/bJHxmTcWZiKuKe9twv/lwe31pvgZbn/OH
rDL2RVlOWW/ZJc5U8/OcguqfzEuoz3I+4hSKn5FThvOntSrnU1w3zqfx+zVf
xblHfQg7hHO/tRV2uuxZ2QJOdvNtnDTmz/FTq9tzbmNPyp62zpb5L2Gr/0kd
rwtcNdxk3AHzEfb6ynwt9lnOJVkV7EuyXLI+sj8508wvcCr4d1VIf0ZWUn+O
t4pXOH5OXlneX9ZqvM9w3XmfxeuPd0u2mpdIP5QzQ99AvxA7n5/DbDs+Lb8+
vhU/jb4D/pQs/oq3ydLgu+InyavL35Gnxx+UjwR9LW+A76x/RN9XPwn/F/5d
/C/4ivjC+rPyUvrV+HL4y/avjt8qu61fI08sHyafqW+oXyRfYL+cZjvsl47z
rP1ac9LqO+JPy5QJ22Vp8d3wb8qfMJwiz4A/JB9lv2/kDfFd9I/qX9a/ib+M
n47/FV8JX0R/Tl5avwZfBDPU/uV5f1uf4A0124brwduK+0+2lpNEPZzzgLw1
dpZ5I/PFnIVmuWQ7Oellbfjp1J3ifcX8Gfkc87f8DMqEHep0vO6at7CHzUbb
65hZI/yf3KqYTviussdkr8j+xs6QXbRvUfXP5mXUP9tnLa+odRhvJK8C74q6
Bm87tidvG/aO+TpeUvVh/Ajeg9Y22N682fLG8iW8R2S7eBlkbe2RXv18/E7w
Z2R1rXNlb/P8l7BTnZ73NrYGdir2c/Mx9vvWfB2+Me8vWTXs86Ru8tzyfvIr
vJmy33jF1OfNy6rP89bxilmH80bxKvL+Udfk7cD24m3H3jVfz0sW3xs/kpfS
2hbbhzdH3kT+Hu9R2W5eRlk7e2RQvxC/I/xZWT3rPNlk3n28XeoMvMnYmthp
2C/Mx9rvuPl6fBPeZVn1eI/mdZfnkfeX/8ObJfudV1x9wbyc+gJvPa94/H3w
KnH+tdbi7MT15uyIN1X1Bk7y+L7YUZxU1nbYueKmsvc5j5nv4WQyb+BnaM/L
qH8xfj/4c/L61vny+3m7rRl57+Bq4d7FZeQdkY2z53eyDfimvL/lT+B7yPLK
Bsj+5c02/4P3OK+E/hdZef0GzuPYq5za2F2yPtid8fkb5xP9RmwK/WjsPGwz
/VJsbv1ebGZuQ2wHbCb9S/G70P8sf9bPtSDON0Z7rJl4U3C1cdNxmXBHZePt
+b1sI74Z74q8RnzuyHvKK/u6pq+D2c3vK98Vn6dx9tBv4t+rH8Odj22u/wCb
R78P+xC3EbYjNrO+M/Ye/Xl5A99zYZxdeHutmXlTcXVwM3CZcV/KJtjzB9km
fHPeP/KacVaS5ZMNlL0lu8qdI7vErRznL/2v8gr6jbwq+Ou8J/HD8HvkL+N3
x+cpPrF+M/4+/Vj8AnwL/TL8Inxes/34LPZoHOdC/EP6LvFvNV5P+H2yh/A9
8NPkT8pnyh/CfyV/3X4/ylvge+vz6wfFewP+Gn4u/k98lThn6S/KK+o34avi
b9j/Kfxw/F75K/g98kL4JPot+Pv14/AL8S31y/GL8fnMDuAftkeTOP/hs+i7
4n+J1wx+vywLvif+XflT8lnyLPiv5RPtd0LeEt9HX0A/OF77+Ov4efi/8KXV
v8kqqTdjS8R7Tnx+c25an+aMMNuH68fZi0uq/pjzgHo8J7W8Pbav772I95xs
BW+JeX75QV7WeD/hPazuxvvVvKF8kfk7vNS8A+qHeb3Mp2Ofxs7GfiN7w54n
ZZvjXMf9V1YrzincvvKC8lflN3jzZZd5ZdS/mz8ev7c41/NKxvsObzSvOu+W
+hnefmx/3j5sMvUnvAfVR+Kszktj7YB9mbeY10q+kldAdoiXLV6LvKzq7rxE
uIuyRrzFcWbhHLRm5czAHdO/7KuQfV4zu2lW1tcf+srx++F9zC9lHR2f7djb
1rpxZscN8H3245KrP+WkVB/Fvs5Ja+2IfcXPsITXWv4hr6DsMC97/N542dQ9
eIlxv8ka85bIpujT8g6ps/FmYp/BzsF+az7JfqfMt8SZlHdVVju+n6ywbIjs
FmeB+d+ccupL5lXUFzmfcEpbx8TnO+c/az3OQVwKX59hU2En4t6Tt9F/JC+k
/9yeOfBN/Yydsdn1PbFJ9L/Lm9j3vTif8A5bs/N6x7keWxc7F/sw9rj8Tfue
lrfm9dMX0Q+NzxH8bfxC/BV8VXx5/Z/yqvpP8TXxd+Kcih+JPyQfiD8gLxzn
Cf1WfGr9G/j38W31q/Dv4QubfYHPaY9m+C74HPpe+D9k6fGfy3Lg+8Q5Xl5P
Pk+eFf+d/C37/SRvg++vL6ofFp8f+P/wi/D/4KvFeUr/l7ya/jN8LfzdOLfi
R+EPywfhD8qLxHlBvw2fRj8Jnw7TCb+U1858Ne99syKyI7xcsq6cnOrenEvm
TeXvx5mD84U1J6dvnCVx9XHzcd/L3rbfGVlbzjXzOtjOfoYBsmKy4fF5w7vD
Wyz/N87v6suy6uqtvDLysbwxvNq8uCw04H2OG8w5hLtfvd08rfrLOI/H79n6
PK8f7wNae/kaXlHZUd4jsm68XOo+8d6H+1PWjLdUNlWfkXdEnYs3F/ssdkE8
AzCfbL+zcf+Ocw7vuuxJbBfeQHlx+Qj5Xd4S2dU466v/Nn9C/Vuc53llreN4
Y3l14iglb8j7Avsq7zD2AfUO83Tqr+JszstgfYHXn7eM10G+lldM9iXvUVl3
3iPqvvHeh/srnmXwPojnAfpMvKPqR3jzsA2wC7E/mr9jv3NxH4/PAN4N2VPx
b4E3SF5CPjIeEMRrWXYtzlj2uGJeQ/07b3vcvazj4zM/UFkjzhHca5zPcQ+q
d5qnV3+NfZuT0foiZzmno2wdp7j5V5zHzJv7GeJB0qP6l+O9Un9Z3oK3LM4x
vC+tj8b9E9cQtwiXDXdCNsWeP8fdPN77eYPNSpqNMrsnXtP46/jq+Mr8f2Q1
4/WL3yEvH58dcQ7gJZY15h3FDeF9EXcgXkr9LlmG+JzDT+Zlsr7EW8HrJFvP
K2H+NS93PIuJMx/vMf0rvL9lD2G/kj0Wd1NZI9liWXbsSdlU+5yPO3l8NuBf
NStlNtoskX4p/gb+CXwV/r+yWvE6xu+UV4jPljgPxGMWWRPel7ihvCNx3+Gl
0u+WZdQfw7/Dy2ztzFvJe162gVfS/BtenngOw+vFy63vx0uhvyJvyVseZxze
19bccU/FNcYtweXAnZJNs+eFuK/H+xPvNbPSZmPMEus/wN/E18BX5V+V1dbv
instNqm+KfareH7ia48+k3yK/EP5C/qN8qX2L2V2zH5543mL/Xrj8+j74/+R
PYz/RpYH/3KcbeRN5O/Jc+JPy9+13y/y5/FD9GX0Y/XT8EnMluFv4Wviq/Gv
yevod8d9Nd7W9M3wo/Ffy4fhj8Z9DJ9Gv1eeWT8V/xH+Rf0m/Af40mbf4vPF
XRKbVz0A+695Vuwx87zYV+LMIm8qfz+eAcim2+dX2QvYm+ZPY4ealzUfZ/4u
J6lsuex2vCb412VPqveYV5RP5Izzc9bjJZc1540x/wY7nPclNq16n+wh9bT4
dy3vwhvAW8V7SbaZV0bWF5uPNxB7Vf8cdgX2XWw27LfqfHEOxTXDLcWdMZ9h
j4vm2+L9g3dL9ky8z/OGycvJx8uTyVbI/ovXhT1umD+l/jPO9LJK1jd443n1
eSnkLXjHsCN4X2HTqfebZ4mzU5zVeVmsXXkDeat5neVbeGVlx3n545zJy68e
xLsXd03WircyzjSc49b8cZbANcd9gDtrPtNev8Uzk3gP4dyW1cUOl5WXTZAl
N19pfideF/yb5k+r/4pzftx349lanA3imipryfkWN5LzNS69+oD5w+rjcVaP
f/vWbpw1nC6yjznlzL/jFIizIaeAejDnPn+e67LWnA/jjMP5zlogzhS4Frhl
uHPms+z1ezwjifcRzn+yetgRsgqy12Up4rVqfpdTy9417XFL9oz+Mm+/vHJ8
3sfzBN59sud4x3GjeN/gSvAy6A/KsupncNZiu+o/wZbXf48taI9W2H7YgvpX
sTdkObHfywpi+8XZQN5SvlyeK+768tn2+kPeBT9SX1E/UT8df2+8XpMn/O9h
bW18Lf5teV3+gbgrie7Xt8KPxX8nH40/Ji8ZZxD9IXk2/Uz8Onw3/af4ZfgK
Zj/gC9m/Nb4/vpD+NfxNWS78D7JC+P7x2S9/Tr5C/kg8B5DPsd8leVf8KH0l
/Rtxn8HfZ7YKf088g4gzGP8/eT3+wbgH4R/Qt8aPw38vH4P/Vl4qzhj6w/Ls
+ln49fju+s/wy/EVzX7EF7Z/mzgb4gvrh+BvyR7B/ygrjB8Qn+/yVvKV8kfx
F+Rz7fenvBt+tP5x/aS43+DvN1uNTxRnkDhj8e/I6/MPxd0I/6C+DX48/gf5
WPzxuEPjM+s/l+fQz8ZvwPfQb8WvwFcyO4EvEq97bBH1UOxt8zbyj+Icwjlh
LcIZGJ9/uNa4D+P+Kptnv79k3Tl3zOvHeTee/Zi/aT6L84BsjSxx/Dn4d2XP
8g/H3QibUt8W+2M8E/H1hT6nfE58BvC78zbieppvw600e1x20p5FZYM4RdXD
OP+Zt5WvinMH56S1KGdQvA/j2uA+irusbL79LsfzFs5d82fjLGtexfwt89mc
B+M1J0sSZ6Z7Ev73AL0B//O4S2hTYdthT8jGyb6L5x3qI+a51N/ZYy42m7VH
/Kz+Xjbxesm38yrLTvGKyQbziqmHx70Ad0fWjrdaNl2fm3dKXSx+B9i22FVx
fzVfYL+/zXfieyZK+N9D8QZxjuaN01aVvy1PGa9DXtI4N9njHnXDOK/hv5BV
iTO6bAKvGS81rz3vJHY89vu4q6qPmj8SdyX8PF72+L7xZ+Bt5vWW7+BVkZ3m
FZe9yiuuHhH3AtxdWXveGtkMfR7eaXVx3ofxDEi/0D5X4vkLdry+mn6yPlW8
Hu2VLJ6VYBOpG9n3iv2OyKrGeVz2un2b89LwOvBOxfMQX1/qH437EG4+Poe1
V/yM+C34PvKd+Kqyn+xdQvYar4R6ZJz94+G8vANvrWymPq/RT+oS5h9h22FX
x33CfJH9/jHfhe9tz3usDbE9eBPk1eXvyFPHmSo+b8zSmnU0O62fYK8f4h6g
/sr8sbjr2GNBvM/Hnvb6mNNXtotTzfwMp6T5EE5J9ShOyng+LM+HPSMrqV4l
by9fI39M/odssX3+le22dx97JbI2it+n7AnZFFmaeE/hJY/XRpyh7JNY3zjO
nvij8mpxf4gzNS8drxPvJ9zruB9xZXjZ9V/LcutP4BfGe398X94n8UxKtptX
3fwsr5R5W95QXin9aF6qeKaM6chbF+cQ3llrKbPVuA64tbjcuEuyJfa8KtuD
72vfiWY1zKaapdVvxKeI10ico/hJ9E3ijh5nOmx67PPYCfwz8onyE/Ky+Bz6
b+R59Ivwn+Jf0e/BP6EfJi+NHyNPbFZAfs73Kq0eHK8HeUf5ujjXyd7jXovz
OzexvDH2DfOa5tPM55ilk23i3BtnJH5SddO4c5tXj3uP+UQ/WyteBt4LvNfN
z2LfwJ6M+4D6mCyvenF8fsXvJv7d8z7j9ZPt5dWQDceW4Y3Fpo7nx+ad8Ovx
s/QF8T+ry5ivjec8+vf51+Msz0+CbSLviZ0kqyV7V5Ze1gCfzN7N4h4Qdwqz
J6xT4s+Nb43PiH8Rfy6eg/j6Vp8PvwT7KPbl+HeP3YrtL9uHrSkbgS1r73Hx
3CTuPNgN2NnYQtjz6rLm6+JZjv5NX7X5080yxJnHPDm/eZzv455gVsM6lTfJ
Hm3wmfAv4X/GTsKeivOK+rh5fvVJ/Hu8x6yvxJ2Ft403QL6fV0t2jldaNpJX
Tj2elwaXLO47vI1xruBcsJYzW4/rhFsf7+XmS+11w3wvtp/9klqbYt+S1ZHN
kGU038y5z7wRP4W6Bf8a9pispnVavNY4mTmdOedxb+JOxxlG/Z15AfUp7Puc
3PH9ONs5A2UHOLXNf+aUMR/FKa+eEPcqf57k8hc5m+KMwfnFWt5sA+553IZ4
Tzf/wF43zfdh+9svmbUZ9m3Zk7KZskzmWzj3mzfm36tuyb+O/VZWK+46snac
hzhdOBfimYWv7/UFsUtxeeJ74HbgBpkfxNUxP2+/suaj8RXUr8ddyp8hhfwl
zuY4a3B+tVYw24h7Abcx3g/Nl9nrlvl+7AD7Jbc2x06WPSWbJcts/jHngfhc
s3cTe9ynfy7O9Pjj8tpxv5G352XhdeX9gnsL9xOuXJwV9D/ICulPx9mZlze+
L28nb7DsEO9J8wu8cvF74Y3hVdRPjDuevBj2oqyi+tX4e5K/KN8kz4P/V77c
XrfjfGivd/RP62fr5+IfMvsE/6A96uKb8u/Xt4qzkawD/mF8N/xE/K/yt+Vn
5OXjTKD/UV5Yvwy/C/+q/nCcEfBPmf2CLx+/D/xYfCX9G3GnwxTH/yarpH4t
/o7kL8k3y/Pir8pX2O+/OCPaa4r+Gf0c/Tx8lnj/xqe0R704E/Ef0LeOs4+s
Iz4rvjv+Yjy/8HVCX0S+XJ7PHgO5w7i7sa/JPo/zgfnT8l/tVSGeQfAeV0+K
s5+8s3xL0v///5uV4P0f5tPYFw==
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$3035586#1"]& ]}}], {}}, {
                   GridLines -> Dynamic[
                    Join[{{{3.3135264*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.4712928*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.6290592*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.7868256*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.9446784*^9, 
                    Directive[
                    GrayLevel[0.9]]}}, {0, 500, 1000, 1500, 2000, 2500, 3000, 
                    3500}}, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x$, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y$, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x$, 
                    GrayLevel[0.7]}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y$, 
                    GrayLevel[0.7]}}}}], 2]], FrameTicks -> {{{{0., 
                    FormBox[
                    StyleBox[
                    TagBox["0", #& ], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {500., 
                    FormBox[
                    StyleBox[
                    TagBox["500", #& ], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {1000., 
                    FormBox[
                    StyleBox[
                    TagBox["1000", #& ], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {1500., 
                    FormBox[
                    StyleBox[
                    TagBox["1500", #& ], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {2000., 
                    FormBox[
                    StyleBox[
                    TagBox["2000", #& ], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {2500., 
                    FormBox[
                    StyleBox[
                    TagBox["2500", #& ], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {3000., 
                    FormBox[
                    StyleBox[
                    TagBox["3000", #& ], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {100., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {200., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {300., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {400., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {600., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {700., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {800., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {900., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1100., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1200., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1300., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1400., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1600., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1700., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1800., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1900., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {2100., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {2200., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {2300., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {2400., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {2600., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {2700., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {2800., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {2900., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {3100., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}}, {{0., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {500., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {1000., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {1500., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {2000., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {2500., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {3000., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {100., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {200., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {300., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {400., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {600., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {700., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {800., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {900., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1100., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1200., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1300., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1400., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1600., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1700., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1800., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1900., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {2100., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {2200., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {2300., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {2400., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {2600., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {2700., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {2800., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {2900., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {3100., 
                    FormBox[
                    StyleBox["\"\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}}}, {{{3.3135264*^9, 
                    FormBox[
                    StyleBox[
                    StyleBox["\"2005\"", 
                    Directive[], {}, StripOnInput -> False], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.4712928*^9, 
                    FormBox[
                    StyleBox[
                    StyleBox["\"2010\"", 
                    Directive[], {}, StripOnInput -> False], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.6290592*^9, 
                    FormBox[
                    StyleBox[
                    StyleBox["\"2015\"", 
                    Directive[], {}, StripOnInput -> False], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.7868256*^9, 
                    FormBox[
                    StyleBox[
                    StyleBox["\"2020\"", 
                    Directive[], {}, StripOnInput -> False], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.9446784*^9, 
                    FormBox[
                    StyleBox[
                    StyleBox["\"2025\"", 
                    Directive[], {}, StripOnInput -> False], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.3135264*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.3450624*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.3765984*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.4081344*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.4397568*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.4712928*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.4712928*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.5028288*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.5343648*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.5659872*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.5975232*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.6290592*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.6290592*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.6605952*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.6922176*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.7237536*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.7552896*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.7868256*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.7868256*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.818448*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.849984*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.88152*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.913056*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.9446784*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}}, {{3.3135264*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.4712928*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.6290592*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.7868256*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.9446784*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], 
                    NCache[{
                    Rational[1, 72], 0}, {0.013888888888888888`, 0}], 
                    Directive[]}, {3.3135264*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.3450624*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.3765984*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.4081344*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.4397568*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.4712928*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.4712928*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.5028288*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.5343648*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.5659872*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.5975232*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.6290592*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.6290592*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.6605952*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.6922176*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.7237536*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.7552896*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.7868256*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.7868256*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.818448*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.849984*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.88152*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.913056*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}, {3.9446784*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {
                    0.009722222222222222, 0.}, 
                    Directive[]}}}}, ImagePadding -> All, 
                    GridLines -> {{{3.3135264*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.4712928*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.6290592*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.7868256*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.9446784*^9, 
                    Directive[
                    GrayLevel[0.9]]}}, Automatic}, PlotRangePadding -> None, 
                    DisplayFunction -> Identity, 
                    Ticks -> {Automatic, Automatic}, 
                    AxesOrigin -> {3.405456*^9, 0}, 
                    FrameTicks -> {{Automatic, {{0., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {1000., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {2000., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {3000., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {200., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {400., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {600., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {800., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {1200., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {1400., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {1600., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {1800., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {2200., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {2400., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {2600., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {2800., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3200., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3400., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3600., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3800., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {4000., 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}}}, {Automatic, {{3.5*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.6*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.7*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.8*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.9*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.4*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.42*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.44*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.46*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.48*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.52*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.54*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.56*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.58*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.62*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.64*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.66*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.68*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.72*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.74*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.76*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.78*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.82*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.84*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.86*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.88*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.92*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.94*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.96*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.98*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {4.*^9, 
                    FormBox[
                    StyleBox[
                    TemplateBox[{0, 0}, "Spacer2"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], TraditionalForm], {0.005, 0.}, {
                    AbsoluteThickness[0.1]}}}}}, GridLines -> {{{3.3135264*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.4712928*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.6290592*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.7868256*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.9446784*^9, 
                    Directive[
                    GrayLevel[0.9]]}}, Automatic}, DisplayFunction -> 
                    Identity, 
                    PlotRangePadding -> {{None, None}, {None, None}}, 
                    PlotRangeClipping -> True, ImagePadding -> All, 
                    DisplayFunction -> Identity, AspectRatio -> 0.2, 
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {3.405456*^9, 0}, AxesStyle -> Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1], BaseStyle -> AbsoluteThickness[1], 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1], 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLines -> {{{3.3135264*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.4712928*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.6290592*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.7868256*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.9446784*^9, 
                    Directive[
                    GrayLevel[0.9]]}}, Automatic}, GridLinesStyle -> 
                    GrayLevel[0.9], ImageSize -> Full, 
                    Method -> {
                    "DefaultBoundaryStyle" -> Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultMeshStyle" -> PointSize[Medium], 
                    "PointSizeFunction" -> "SmallPointSize", 
                    "ScalingFunctions" -> None, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}, "AxesInFront" -> True}, 
                    PlotRange -> {{3.405456*^9, 3.939408*^9}, {
                    0, 3197.4649746500054`}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{None, None}, {None, None}}, Prolog -> {
                    Opacity[0], 
                    TagBox[
                    RectangleBox[
                    Scaled[{0, 0}], 
                    Scaled[{1, 1}]], Annotation[#, "DatePlot", "Frame"]& ]}, 
                    Ticks -> {Automatic, Automatic}, TicksStyle -> 
                    Directive[FontFamily -> "Times", FontSize -> 10]}, 
                   TicksStyle -> Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1]], 
                  TagBox[
                   GridBox[{{
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"in hits per day\"", 
                    "\[NoBreak]", "\")\""}], {
                    FontSize -> 10, FontFamily -> "Roboto", 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"]}, "Labeled", DisplayFunction -> (FormBox[
                   GridBox[{{
                    TagBox[
                    ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                    "SkipImageSizeLevel"]}, {
                    
                    ItemBox[#2, Alignment -> {Left, Inherited}, 
                    DefaultBaseStyle -> "LabeledLabel"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], TraditionalForm]& ), 
                 InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Labeled", FontFamily -> "Roboto", FontSize -> 13], "[", 
                    RowBox[{#, ",", 
                    RowBox[{"{", #2, "}"}], ",", 
                    TemplateBox[{
                    GridBox[{{
                    StyleBox[
                    "Bottom", FontFamily -> "Roboto", FontSize -> 13], 
                    StyleBox[
                    "Left", FontFamily -> "Roboto", FontSize -> 13]}}, 
                    RowSpacings -> 1, ColumnSpacings -> 1, RowAlignments -> 
                    Baseline, ColumnAlignments -> Center]}, "Matrix", 
                    DisplayFunction -> (
                    RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
                    InterpretationFunction -> (#& )]}], "]"}]& )]}, {
                PaneBox[
                 TagBox[
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{
                    "\"based on monthly averages of daily hits to English\
\[Hyphen]language \"", 
                    TagBox[
                    StyleBox[
                    
                    TemplateBox[{"\"\\\"\"", "\"Ljubljana\"", "\"\\\"\""}, 
                    "RowDefault"], {FontSize -> 10, FontFamily -> "Roboto", 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], Annotation[#, {
                    "URL" -> "https://en.wikipedia.org/wiki?curid=42374", 
                    "Popup" -> "link to Wikipedia", "OneClick" -> False}, 
                    "ExternalLink"]& ], "\" page\""}, "RowDefault"], 
                    "\[NoBreak]", "\")\""}], {
                   FontSize -> 10, FontFamily -> "Roboto", 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"computabledata,formatteddata,timeseriesdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Log scale", "input" -> 
         "PopularityPod:WikipediaStatsData__Log scale"}, {}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {
   True, False, {False, False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "Ljubljana", "template" -> 
        "Assuming \"Ljubljana\" is a city${separator}Use as ${desc} instead", 
        "count" -> "2", "pulldown" -> "false", "default" -> 
        "{\"C\", \"Ljubljana\"} -> {\"City\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "City", "desc" -> "a city", "input" -> 
          "{\"C\", \"Ljubljana\"} -> {\"City\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "AdministrativeDivision", "desc" -> 
          "an administrative division", "input" -> 
          "{\"C\", \"Ljubljana\"} -> {\"AdministrativeDivision\"}"}, {}]}]}], 
    XMLElement["userinfoused", {"count" -> "1"}, {"\n  ", 
      XMLElement["userinfo", {"name" -> "Country"}, {}], "\n "}], 
    XMLElement["sources", {"count" -> "7"}, {
      XMLElement[
      "source", {
       "url" -> 
        "https://www6b3.wolframalpha.com/sources/\
AdministrativeDivisionDataSourceInformationNotes.html", "text" -> 
        "Administrative division data"}, {}], 
      XMLElement[
      "source", {
       "url" -> 
        "https://www6b3.wolframalpha.com/sources/\
CityDataSourceInformationNotes.html", "text" -> "City data"}, {}], 
      XMLElement[
      "source", {
       "url" -> 
        "https://www6b3.wolframalpha.com/sources/\
NuclearReactorDataSourceInformationNotes.html", "text" -> 
        "Nuclear reactor data"}, {}], 
      XMLElement[
      "source", {
       "url" -> 
        "https://www6b3.wolframalpha.com/sources/\
OpenStreetMapSourceInformationNotes.html", "text" -> "Open street map"}, {}], 
      XMLElement[
      "source", {
       "url" -> 
        "https://www6b3.wolframalpha.com/sources/\
PeopleDataSourceInformationNotes.html", "text" -> "People data"}, {}], 
      XMLElement[
      "source", {
       "url" -> 
        "https://www6b3.wolframalpha.com/sources/\
USCensusDataSourceInformationNotes.html", "text" -> "US census data"}, {}], 
      XMLElement[
      "source", {
       "url" -> 
        "https://www6b3.wolframalpha.com/sources/\
WeatherDataSourceInformationNotes.html", "text" -> "Weather data"}, {}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "15", "datatypes" -> 
    "AdministrativeDivision,City,NuclearReactor,Person,WeatherStation", 
    "timedout" -> "", "timedoutpods" -> "", "timing" -> "2.232", 
    "parsetiming" -> "0.057", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSP124214i1a8g2abeiabbg000068g3g91db8ci3bc5", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "11", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa124314i1a8g2abeiabbg000013c9g18223dc3hcf5481992349747128482", "version" -> 
    "2.6", "inputstring" -> "Ljubljana"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2025, 3, 6, 14, 30, 41.7945498`9.37369452881652}, "Line" -> 44,
     "SessionID" -> 22759329155016478688}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, Typeset`failedpods$$ = {}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "Ljubljana"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$}, Typeset`chosen$$,
         Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{824., {1318.1588127960324`, 1323.4498284210324`}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.950256641921835*^9},ExpressionUUID->"5d777ce9-530e-b347-9b92-\
c07d021cbdcd"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Naloga  7", "Section",
 CellChangeTimes->{{3.919996397481461*^9, 3.919996402044342*^9}, {
  3.919999362715146*^9, 
  3.9199993628093567`*^9}},ExpressionUUID->"eb014f23-c351-4426-8632-\
4eeee80f17e4"],

Cell[TextData[{
 "Dano  je  rekurzivno  zaporedje ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{
         SubscriptBox[
          StyleBox["a", "TI"], 
          RowBox[{
            StyleBox["n", "TI"], "+", "1"}]], "\[LongEqual]", 
         FractionBox["1", "6"], 
         RowBox[{"(", 
           RowBox[{
             SubsuperscriptBox[
              StyleBox["a", "TI"], 
              StyleBox["n", "TI"], "2"], "+", 
             SubscriptBox[
              StyleBox["a", "TI"], 
              StyleBox["n", "TI"]], "+", "6"}], ")"}]}], TraditionalForm], 
     "errors" -> {}, "input" -> "a_{n+1} = \\frac{1}{6}(a_n^2 + a_n + 6)", 
     "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "7058166c-811a-475b-8731-a356d1a02ab5"],
 ". "
}], "Text",
 CellChangeTimes->{{3.919998087748533*^9, 3.9199980976564407`*^9}, {
  3.9199981434652343`*^9, 
  3.919998148414006*^9}},ExpressionUUID->"8e9b5aa9-426c-42c3-9da8-\
7281521707f8"],

Cell[TextData[{
 "a) V Mathematici definiraj zaporedje ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       SubscriptBox[
        StyleBox["a", "TI"], 
        StyleBox["n", "TI"]], TraditionalForm], "errors" -> {}, "input" -> 
     "a_n", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "062f71a8-eebe-4171-a623-205735b10ae4"],
 " z za\[CHacek]etnim \[CHacek]lenom ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       StyleBox["b", "TI"], TraditionalForm], "errors" -> {}, "input" -> "b", 
     "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "4b08be14-2816-4248-9606-d18e6cca8ba5"],
 ".\nb) Izra\[CHacek]unaj prvih 5 \[CHacek]lenova zaporedja ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       SubscriptBox[
        StyleBox["a", "TI"], 
        StyleBox["n", "TI"]], TraditionalForm], "errors" -> {}, "input" -> 
     "a_n", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "5b90e202-852a-486a-8e6b-7159c208f7cc"],
 ". Nato vse vse izraze raz\[SHacek]iri in zdru\[ZHacek]i na skupni ulomek."
}], "Text",
 CellChangeTimes->{{3.919998153780141*^9, 3.919998264676924*^9}, {
  3.920003805806257*^9, 3.9200038275685883`*^9}, {3.920004196078734*^9, 
  3.920004258869033*^9}, {3.920004919452681*^9, 
  3.920004926249573*^9}},ExpressionUUID->"2753b63b-f4c6-4639-8915-\
1c54867de651"],

Cell[BoxData[
 RowBox[{"ClearAll", "[", 
  RowBox[{"a", ",", " ", "b", ",", " ", "n"}], "]"}]], "Input",
 CellChangeTimes->{{3.9502577067984257`*^9, 3.950257712001875*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"9499eacd-4b68-a549-affa-21762d7691cd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"a", "[", "1", "]"}], ":=", "b"}]], "Input",
 CellChangeTimes->{{3.950257663367342*^9, 3.950257672240343*^9}},
 CellLabel->"In[90]:=",ExpressionUUID->"5afed9a8-95a8-a443-b7dd-48166e269468"],

Cell[BoxData[
 RowBox[{
  RowBox[{"a", "[", "n_", "]"}], ":=", 
  RowBox[{
   RowBox[{"1", "/", "6"}], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"a", "[", 
       RowBox[{"n", "-", "1"}], "]"}], "^", "2"}], " ", "+", " ", 
     RowBox[{"a", "[", 
      RowBox[{"n", "-", "1"}], "]"}], "+", "6"}], ")"}]}]}]], "Input",
 CellChangeTimes->{{3.95025759939719*^9, 3.950257632550453*^9}, {
  3.9502577633940735`*^9, 3.950257763542473*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"fe182088-07c0-c145-936a-fe675f5054ad"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a", "[", "3", "]"}]], "Input",
 CellChangeTimes->{{3.950257637937664*^9, 3.9502576396204834`*^9}},
 CellLabel->"In[95]:=",ExpressionUUID->"a5328ca0-a207-3a4d-aa1a-10bc40301b2a"],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "6"], " ", 
  RowBox[{"(", 
   RowBox[{"6", "+", 
    RowBox[{
     FractionBox["1", "6"], " ", 
     RowBox[{"(", 
      RowBox[{"6", "+", "b", "+", 
       SuperscriptBox["b", "2"]}], ")"}]}], "+", 
    RowBox[{
     FractionBox["1", "36"], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"6", "+", "b", "+", 
        SuperscriptBox["b", "2"]}], ")"}], "2"]}]}], ")"}]}]], "Output",
 CellChangeTimes->{
  3.9502576405745964`*^9, 3.9502576814790936`*^9, 3.9502577211621113`*^9, {
   3.9502577563637085`*^9, 3.950257768853533*^9}},
 CellLabel->"Out[95]=",ExpressionUUID->"9c4a4c5d-7943-ed4f-a631-3b9634ddd62b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Naloga  8", "Section",
 CellChangeTimes->{{3.920004938344748*^9, 
  3.920004941839056*^9}},ExpressionUUID->"1283ebc8-106a-4df3-95da-\
0cb005c33c8c"],

Cell[TextData[{
 "Za zaporedje ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{
         SubscriptBox[
          StyleBox["a", "TI"], 
          StyleBox["n", "TI"]], "\[LongEqual]", 
         SubscriptBox[
          StyleBox["a", "TI"], 
          RowBox[{
            StyleBox["n", "TI"], "-", "1"}]], "+", 
         FractionBox[
          RowBox[{
            StyleBox["n", "TI"], "\[CenterDot]", 
            SubscriptBox[
             StyleBox["a", "TI"], 
             RowBox[{
               StyleBox["n", "TI"], "-", "2"}]]}], 
          RowBox[{
            StyleBox["n", "TI"], "+", "1"}]]}], TraditionalForm], 
     "errors" -> {}, "input" -> 
     "a_n = a_{n-1} + \\frac{n\\cdot a_{n-2}}{n+1}", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "20074c24-64c1-4845-9adf-464b1fa08e88"],
 " z za\[CHacek]etnima \[CHacek]lenoma ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{
         SubscriptBox[
          StyleBox["a", "TI"], "1"], "\[LongEqual]", "0"}], TraditionalForm], 
     "errors" -> {}, "input" -> "a_1 = 0", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "ecb1a9ea-8d94-4e5f-9dd7-e0ed25e0b7b8"],
 " in ",
 Cell[BoxData[
  FormBox[
   TemplateBox[<|"boxes" -> FormBox[
       RowBox[{
         SubscriptBox[
          StyleBox["a", "TI"], "2"], "\[LongEqual]", "1"}], TraditionalForm], 
     "errors" -> {}, "input" -> "a_2 = 1", "state" -> "Boxes"|>,
    "TeXAssistantTemplate"], TraditionalForm]],ExpressionUUID->
  "6ab95127-db95-4276-b87f-84846b81649f"],
 " izra\[CHacek]unajte njegovo limito. Uporabite RSolveValue."
}], "Text",
 CellChangeTimes->{{3.920004943846568*^9, 3.920004957246263*^9}, {
  3.920005040870591*^9, 3.920005088511555*^9}, {3.9502516966636877`*^9, 
  3.950251705783321*^9}},ExpressionUUID->"046af472-0bea-4d1d-bf82-\
7a039c3dbd22"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Naloga 9", "Section",
 CellChangeTimes->{{3.8231618891351395`*^9, 3.82316190190687*^9}, {
  3.950251684578677*^9, 3.950251684708189*^9}, {3.9502517304744253`*^9, 
  3.950251730810876*^9}},ExpressionUUID->"ed9ca7f6-abe9-4475-83cc-\
4daeb6756a0e"],

Cell["\<\
Naslednje naloge re\[SHacek]i s pomo\[CHacek]jo vnosa z naravnim jezikom \
(brez znanja sintakse Mathematice in brez pomo\[ZHacek]nih ra\[CHacek]unov). \
V vseh primerih se prepri\[CHacek]aj, da je Mathematica razumela tvoj ukaz. \
Glej spodnji primer.\
\>", "Text",
 CellChangeTimes->{{3.824278606060779*^9, 3.824278689591808*^9}, {
  3.824278888560747*^9, 3.8242788915809774`*^9}, {3.824278997512186*^9, 
  3.82427901034433*^9}},ExpressionUUID->"a90d3e70-189a-47af-a344-\
e28dba88a90f"],

Cell[CellGroupData[{

Cell["Primer", "Subsection",
 CellChangeTimes->{{3.824278693799258*^9, 3.8242787132071357`*^9}, {
  3.824278902865645*^9, 
  3.82427890305021*^9}},ExpressionUUID->"8ee44194-5cda-40ed-93b4-\
6d95746a7db0"],

Cell["\<\
Izra\[CHacek]unaj 20. \[SHacek]tevko v decimalnem zapisu \[SHacek]tevila \
1+1/2+1/3+...+1/100.\
\>", "Text",
 CellChangeTimes->{{3.824278790003468*^9, 
  3.8242788561122627`*^9}},ExpressionUUID->"fee379c9-4819-4475-a59c-\
581e3d308ce0"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "please compute the 20th digit of 1+1/2+1/3+...+1/100", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {"Result", "Result", 1, 1, "Output", "8"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}, 
      "ExtrusionOpen" -> True}}, Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods"}, Typeset`pod1$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    SuperscriptBox["20", "\"th\""], 
                    Global`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"20", "\"th\""}]]], 
                    "\" digit\""}, "RowDefault"], {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    TagBox[
                    RowBox[{"1", "+", 
                    FractionBox["1", "2"], "+", 
                    FractionBox["1", "3"], "+", "\"\[CenterEllipsis]\"", "+", 
                    FractionBox["1", "100"]}], HoldForm], HoldForm]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Result", "numsubpods" -> "1", 
     "position" -> "200", "primary" -> "true", "scanner" -> "Sum", "title" -> 
     "Result"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["moutput", {}, {"8"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["8", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Show details", "input" -> "Result__Show details"}, {}]}]}],
    Typeset`pod3$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "NearByDigits", "numsubpods" -> "1", 
     "position" -> "300", "scanner" -> "NthDigit", "title" -> 
     "Nearby digits"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              StyleBox["5", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["\".\"", 
               GrayLevel[0.5], StripOnInput -> False], 
              StyleBox["1", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["8", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["7", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["3", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["7", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["7", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["5", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["1", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["7", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["6", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["3", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["9", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["6", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["2", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["0", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["2", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["6", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["0", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], "8", 
              StyleBox["0", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["5", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["1", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["1", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["7", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["6", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["7", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["5", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["6", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["5", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["8", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["2", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["5", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["3", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["1", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["5", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["7", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["9", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["0", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["8", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["9", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["7", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["2", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["1", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["2", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["6", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["7", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["0", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["8", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["4", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False], 
              StyleBox["\"\[Ellipsis]\"", 
               RGBColor[
               0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
               StripOnInput -> False]}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "3", "datatypes" -> 
    "NthDigit", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.42", 
    "parsetiming" -> "0.935", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSP26391cdgi3i9iic87i2e00002e3ge1165592fe15", "host" -> 
    "https://www4d.wolframalpha.com", "server" -> "5", "related" -> 
    "https://www4d.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa26401cdgi3i9iic87i2e0000491c41b5f5259b6c6728076557243023091", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2021, 3, 9, 12, 39, 35.0636592`9.297432130252918}, "Line" -> 1,
     "SessionID" -> 29838564271048567026}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Result", "Result", 1, 1, "Output", "8"}, Typeset`open$$ = True, 
   Typeset`newq$$ = "please compute the 20th digit of 1+1/2+1/3+...+1/100"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{560., {334.48494149217635`, 16.912109375}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[1]:=",ExpressionUUID->"4db8b495-b369-4323-8d5d-c79430b90dc6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Naloge", "Subsection",
 CellChangeTimes->{{3.8242788626612997`*^9, 
  3.8242788980299807`*^9}},ExpressionUUID->"3cd143b3-7b01-425e-8ad4-\
d83133f077da"],

Cell["Dolo\[CHacek]i 443. \[SHacek]tevko v decimalnem zapisu \[SHacek]tevila \
pi.", "Text",
 CellChangeTimes->{{3.82367445232017*^9, 3.823674533161069*^9}, {
  3.8242789123164234`*^9, 
  3.824278926666879*^9}},ExpressionUUID->"58847c28-8ced-420a-87fc-\
044f588324c2"],

Cell["\<\
Izra\[CHacek]unaj plo\[SHacek]\[CHacek]ino obmo\[CHacek]ja med krivuljama \
f(x)=3x^2+2x+1 in g(x)=4-4x^4.\
\>", "Text",
 CellChangeTimes->{{3.824278934923018*^9, 3.8242789483250437`*^9}, {
  3.8242790294320073`*^9, 3.824279067181547*^9}, {3.824279128999233*^9, 
  3.824279136992445*^9}},ExpressionUUID->"2f03d297-d0ca-4144-bbd2-\
673bc362ef5f"],

Cell["Izra\[CHacek]unaj f(3), kjer je f(x)=1+1/x.", "Text",
 CellChangeTimes->{{3.824279221136812*^9, 3.824279248408711*^9}, {
  3.82427946829105*^9, 3.824279470231556*^9}, {3.824279511797959*^9, 
  3.8242795119608803`*^9}},ExpressionUUID->"1bea0319-a5dc-4a26-a2d9-\
6fe4165d5f3f"],

Cell["\<\
Izra\[CHacek]unaj obseg elipse s polosema 4 in 3. Ugotovi pribli\[ZHacek]no \
vrednost.\
\>", "Text",
 CellChangeTimes->{{3.824279529171213*^9, 3.824279558645338*^9}, {
  3.824279718775467*^9, 
  3.824279730244441*^9}},ExpressionUUID->"e4ee66e2-f5f4-4c3f-93f0-\
cefc43abbba6"],

Cell["\<\
Matej ima 512 jabolk, Jana pa 1024 jabolk. Koliko jabolk imata Matej in Jana \
skupaj?\
\>", "Text",
 CellChangeTimes->{{3.8242797559107485`*^9, 3.824279805450908*^9}, {
  3.824279994366373*^9, 
  3.824280011871313*^9}},ExpressionUUID->"fbe66c58-fca5-4df6-bb08-\
22b01bdd186f"],

Cell["\<\
Ali je 1009 pra\[SHacek]tevilo? Izra\[CHacek]unaj vsoto \
1/2+1/3+1/5+1/7+1/11+...+1/1009. Kaj predstavlja ta vsota?\
\>", "Text",
 CellChangeTimes->{{3.824280056484812*^9, 3.824280103617164*^9}, {
  3.824280171584229*^9, 3.824280190379066*^9}, {3.824280231570858*^9, 
  3.824280231771147*^9}},ExpressionUUID->"ff096f01-b3c8-4dd0-94f8-\
90ef2dab8e72"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Naloga 10", "Section",
 CellChangeTimes->{{3.824280024587415*^9, 3.8242800277175612`*^9}, {
  3.82428030154875*^9, 3.824280302737523*^9}, {3.950251686940125*^9, 
  3.950251694572014*^9}, {3.950251732935874*^9, 
  3.950251733551045*^9}},ExpressionUUID->"da9c32f4-7556-463f-b74f-\
1b3da56a8cc6"],

Cell["Naslednje naloge re\[SHacek]i z vnosom z naravnim jezikom.", "Text",
 CellChangeTimes->{{3.824280452512235*^9, 
  3.824280473332304*^9}},ExpressionUUID->"eab91856-d26a-4d05-b5fc-\
784c91088d29"],

Cell[CellGroupData[{

Cell["Naloge", "Subsection",
 CellChangeTimes->{{3.824280575592417*^9, 
  3.824280593798018*^9}},ExpressionUUID->"eb8383f9-dece-46c6-9269-\
b02669af78aa"],

Cell["Dolo\[CHacek]i povr\[SHacek]ino Slovenije in skupno dol\[ZHacek]no \
njene meje.", "Text",
 CellChangeTimes->{{3.8242805969743814`*^9, 
  3.824280652236888*^9}},ExpressionUUID->"cbd7a6dc-2889-403a-b0e6-\
ed7f224a8e03"],

Cell["Koliko Slovenij prekrije povr\[SHacek]ino Rusije?", "Text",
 CellChangeTimes->{{3.824280667292456*^9, 3.8242806783029656`*^9}, {
  3.824280833863787*^9, 3.824280836015839*^9}, {3.921211694452674*^9, 
  3.92121169625245*^9}},ExpressionUUID->"7ee40ca9-1657-4c28-9f6f-\
d9457a8d24b6"],

Cell["Kolik\[SHacek]na je temperatura sonca?", "Text",
 CellChangeTimes->{{3.824281158263304*^9, 3.824281193732393*^9}, {
  3.824281309914006*^9, 
  3.824281312404889*^9}},ExpressionUUID->"52c87207-abb7-437d-b05b-\
af09c21a0f07"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{902.6666666666666, 531},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"14.1 for Microsoft Windows (64-bit) (July 16, 2024)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"7969fb26-9c5c-401d-8b1f-38fe0bd3c0de"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 256, 4, 96, "Title",ExpressionUUID->"53ccfd1a-4c2d-46b1-8bdb-63572cb080fa"],
Cell[839, 28, 250, 4, 33, "Text",ExpressionUUID->"06d0c6b1-1999-4140-99f0-10a8f144b90f"],
Cell[CellGroupData[{
Cell[1114, 36, 251, 4, 66, "Section",ExpressionUUID->"be69bd61-b0ef-4752-bce9-227644e8d8fe"],
Cell[1368, 42, 297, 7, 55, "Text",ExpressionUUID->"90c84ab9-ce97-483d-ade2-613fa46deddc"],
Cell[1668, 51, 1890, 45, 180, "Input",ExpressionUUID->"64c94f77-be25-9848-b7fb-fd2f94bfddcc"],
Cell[3561, 98, 488, 9, 28, "Input",ExpressionUUID->"ea6fd15e-13e4-e245-9629-2bc48a8c9f18"],
Cell[CellGroupData[{
Cell[4074, 111, 592, 13, 66, "Input",ExpressionUUID->"4e83b140-35a8-c142-90f2-57c12059679b"],
Cell[4669, 126, 373, 7, 32, "Output",ExpressionUUID->"5e9b0bf6-0f47-464d-bb8f-6e75563000d3"],
Cell[5045, 135, 1355, 20, 89, "Output",ExpressionUUID->"83e64997-4c4b-3241-b9bc-809781018344"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6437, 160, 216, 3, 28, "Input",ExpressionUUID->"5d41300c-1383-854e-86c6-036ac0054233"],
Cell[6656, 165, 1334, 20, 89, "Output",ExpressionUUID->"26893b12-bd57-4647-9c93-1b2103da3db1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8027, 190, 282, 5, 28, "Input",ExpressionUUID->"be65f664-d698-8e40-9e7d-ab8e31604af6"],
Cell[8312, 197, 1329, 20, 89, "Output",ExpressionUUID->"ca7f5d1c-0991-6040-ad02-7fb3e2bbfefc"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[9690, 223, 302, 5, 66, "Section",ExpressionUUID->"95ae1cb0-793f-4738-ba37-8495cb33ccee"],
Cell[9995, 230, 410, 8, 55, "Text",ExpressionUUID->"f1e0cfbd-acf5-4bb7-9ea9-c95a6e8e3c22"],
Cell[CellGroupData[{
Cell[10430, 242, 957, 23, 66, "Input",ExpressionUUID->"8e5998df-b940-5749-b68a-28d4a84269ca"],
Cell[11390, 267, 352, 10, 32, "Output",ExpressionUUID->"039ef733-93bb-764e-b646-5c5a69cd6bb2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11779, 282, 545, 13, 28, "Input",ExpressionUUID->"ca05e76f-3082-e641-9ab8-f7f1c5fb61a6"],
Cell[12327, 297, 365, 9, 32, "Output",ExpressionUUID->"74a46146-4ede-3245-82d0-99b98b9e2787"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12729, 311, 673, 20, 47, "Input",ExpressionUUID->"7ff53595-b3be-c54f-8dc7-ae34d632a616"],
Cell[13405, 333, 290, 7, 32, "Output",ExpressionUUID->"aa6574a2-933c-684c-9ca1-8a01e6ec9fec"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[13744, 346, 205, 4, 66, "Section",ExpressionUUID->"384fdf7b-7f4e-4c1f-83db-1623727d936b"],
Cell[13952, 352, 666, 12, 77, "Text",ExpressionUUID->"d09306df-7e16-4e4f-8970-02df229e94e1"],
Cell[14621, 366, 148, 2, 28, "Input",ExpressionUUID->"d1200e08-b32c-3a48-920d-a1d7c5b89b99"],
Cell[14772, 370, 452, 12, 47, "Input",ExpressionUUID->"375381fb-6757-5242-bdcf-e144324fb44a"],
Cell[15227, 384, 448, 12, 47, "Input",ExpressionUUID->"2335b8a4-5e29-0444-8c4b-79fb7db82d5a"],
Cell[CellGroupData[{
Cell[15700, 400, 700, 18, 47, "Input",ExpressionUUID->"50b28160-abe2-bf4a-8345-3389ef5e5cef"],
Cell[16403, 420, 443, 11, 32, "Output",ExpressionUUID->"dd9389aa-4f90-1f40-af8c-93d3e20fc1c1"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[16895, 437, 250, 4, 66, "Section",ExpressionUUID->"050253b4-28d8-440a-9515-c847daabc761"],
Cell[17148, 443, 673, 13, 143, "Text",ExpressionUUID->"20070092-6fb9-4e4a-8e1a-d0a625226068"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17858, 461, 253, 4, 66, "Section",ExpressionUUID->"41d21403-a04a-4f2c-b37b-968c7f0ac171"],
Cell[18114, 467, 468, 10, 99, "Text",ExpressionUUID->"dffccb33-fe4d-41fe-a1fd-4315b1baf132"],
Cell[CellGroupData[{
Cell[18607, 481, 398, 9, 28, "Input",ExpressionUUID->"eff2283a-728a-a94c-b23d-c3825eea965a"],
Cell[19008, 492, 1216, 29, 110, "Output",ExpressionUUID->"0684eadd-6104-6f49-97d9-426e9f138b50"]
}, Open  ]],
Cell[20239, 524, 131, 3, 28, "Input",ExpressionUUID->"78d1c72f-317a-d448-bf93-eb2855a648de"]
}, Open  ]],
Cell[CellGroupData[{
Cell[20407, 532, 250, 4, 66, "Section",ExpressionUUID->"37655d52-a1b3-4408-9591-8b0a22cc0d5c"],
Cell[20660, 538, 319, 6, 55, "Text",ExpressionUUID->"cb1e7497-e2fe-4b4d-8a91-1c5b2901b537"],
Cell[20982, 546, 154, 3, 28, "Input",ExpressionUUID->"8879c16d-1f8f-6241-b2de-63b758357a2b"],
Cell[CellGroupData[{
Cell[21161, 553, 856, 24, 47, "Input",ExpressionUUID->"140e85cc-5be1-9f43-8a8e-8ef99572cf92"],
Cell[22020, 579, 43248, 758, 240, "Output",ExpressionUUID->"cae29a12-b95e-b048-8d3a-c923814b749e"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[65317, 1343, 251, 4, 66, "Section",ExpressionUUID->"9059f268-88ed-46fa-9f80-f2f54b64459f"],
Cell[65571, 1349, 3527, 93, 147, "Text",ExpressionUUID->"09c2cc28-ce83-4e5a-ae08-b7e193d44db1"],
Cell[69101, 1444, 177, 3, 28, "Input",ExpressionUUID->"a95f2a42-05a5-4142-9c83-4dbecc7d4edd"],
Cell[CellGroupData[{
Cell[69303, 1451, 1203, 34, 104, "Input",ExpressionUUID->"ff898175-53bc-5042-be47-2b3b46c72ef4"],
Cell[70509, 1487, 1185, 20, 94, "Output",ExpressionUUID->"1421eb22-dccf-574f-bf28-589d304cc1c3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[71731, 1512, 302, 6, 28, "Input",ExpressionUUID->"7c1b4b17-3bd8-5643-afe0-ffbf27c35dde"],
Cell[72036, 1520, 151, 2, 32, "Output",ExpressionUUID->"fa300386-60a7-0844-8b8b-7afb6958a91d"]
}, Open  ]],
Cell[72202, 1525, 388, 9, 28, "Input",ExpressionUUID->"58e4ace6-8f73-084c-af0c-9edb746d84f5"],
Cell[CellGroupData[{
Cell[72615, 1538, 643, 16, 89, "Input",ExpressionUUID->"49b0ec96-790b-3940-9473-356d35127199"],
Cell[73261, 1556, 195, 4, 50, "Output",ExpressionUUID->"84d97303-c1e1-d845-a804-4863d35a4af9"],
Cell[73459, 1562, 169, 2, 51, "Output",ExpressionUUID->"03984059-ac98-2643-be17-419fd1885e36"]
}, Open  ]],
Cell[CellGroupData[{
Cell[73665, 1569, 192, 2, 38, "WolframAlphaLong",ExpressionUUID->"18edfa26-d89d-6a40-bc27-7815f146fc46"],
Cell[73860, 1573, 140182, 2706, 2231, "Print",ExpressionUUID->"4fe334d1-97c3-424f-9d74-98a1bc3de4fe"]
}, Open  ]],
Cell[CellGroupData[{
Cell[214079, 4284, 184, 2, 38, "WolframAlphaLong",ExpressionUUID->"3f3a6f81-04cd-4448-a744-d751203f2448"],
Cell[214266, 4288, 477451, 8625, 2649, "Print",ExpressionUUID->"5d777ce9-530e-b347-9b92-c07d021cbdcd"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[691766, 12919, 205, 4, 66, "Section",ExpressionUUID->"eb014f23-c351-4426-8632-4eeee80f17e4"],
Cell[691974, 12925, 1005, 28, 48, "Text",ExpressionUUID->"8e9b5aa9-426c-42c3-9da8-7281521707f8"],
Cell[692982, 12955, 1459, 35, 55, "Text",ExpressionUUID->"2753b63b-f4c6-4639-8915-1c54867de651"],
Cell[694444, 12992, 251, 4, 28, "Input",ExpressionUUID->"9499eacd-4b68-a549-affa-21762d7691cd"],
Cell[694698, 12998, 223, 4, 28, "Input",ExpressionUUID->"5afed9a8-95a8-a443-b7dd-48166e269468"],
Cell[694924, 13004, 534, 14, 28, "Input",ExpressionUUID->"fe182088-07c0-c145-936a-fe675f5054ad"],
Cell[CellGroupData[{
Cell[695483, 13022, 201, 3, 28, "Input",ExpressionUUID->"a5328ca0-a207-3a4d-aa1a-10bc40301b2a"],
Cell[695687, 13027, 667, 19, 65, "Output",ExpressionUUID->"9c4a4c5d-7943-ed4f-a631-3b9634ddd62b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[696403, 13052, 154, 3, 66, "Section",ExpressionUUID->"1283ebc8-106a-4df3-95da-0cb005c33c8c"],
Cell[696560, 13057, 1924, 51, 45, "Text",ExpressionUUID->"046af472-0bea-4d1d-bf82-7a039c3dbd22"]
}, Open  ]],
Cell[CellGroupData[{
Cell[698521, 13113, 251, 4, 66, "Section",ExpressionUUID->"ed9ca7f6-abe9-4475-83cc-4daeb6756a0e"],
Cell[698775, 13119, 498, 9, 55, "Text",ExpressionUUID->"a90d3e70-189a-47af-a344-e28dba88a90f"],
Cell[CellGroupData[{
Cell[699298, 13132, 204, 4, 53, "Subsection",ExpressionUUID->"8ee44194-5cda-40ed-93b4-6d95746a7db0"],
Cell[699505, 13138, 247, 6, 33, "Text",ExpressionUUID->"fee379c9-4819-4475-a59c-581e3d308ce0"],
Cell[699755, 13146, 19246, 407, 366, "WolframAlphaShortInput",ExpressionUUID->"4db8b495-b369-4323-8d5d-c79430b90dc6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[719038, 13558, 158, 3, 54, "Subsection",ExpressionUUID->"3cd143b3-7b01-425e-8ad4-d83133f077da"],
Cell[719199, 13563, 268, 5, 35, "Text",ExpressionUUID->"58847c28-8ced-420a-87fc-044f588324c2"],
Cell[719470, 13570, 355, 7, 35, "Text",ExpressionUUID->"2f03d297-d0ca-4144-bbd2-673bc362ef5f"],
Cell[719828, 13579, 281, 4, 35, "Text",ExpressionUUID->"1bea0319-a5dc-4a26-a2d9-6fe4165d5f3f"],
Cell[720112, 13585, 286, 7, 35, "Text",ExpressionUUID->"e4ee66e2-f5f4-4c3f-93f0-cefc43abbba6"],
Cell[720401, 13594, 287, 7, 35, "Text",ExpressionUUID->"fbe66c58-fca5-4df6-bb08-22b01bdd186f"],
Cell[720691, 13603, 361, 7, 35, "Text",ExpressionUUID->"ff096f01-b3c8-4dd0-94f8-90ef2dab8e72"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[721101, 13616, 299, 5, 67, "Section",ExpressionUUID->"da9c32f4-7556-463f-b74f-1b3da56a8cc6"],
Cell[721403, 13623, 200, 3, 35, "Text",ExpressionUUID->"eab91856-d26a-4d05-b5fc-784c91088d29"],
Cell[CellGroupData[{
Cell[721628, 13630, 154, 3, 54, "Subsection",ExpressionUUID->"eb8383f9-dece-46c6-9269-b02669af78aa"],
Cell[721785, 13635, 224, 4, 35, "Text",ExpressionUUID->"cbd7a6dc-2889-403a-b0e6-ed7f224a8e03"],
Cell[722012, 13641, 287, 4, 35, "Text",ExpressionUUID->"7ee40ca9-1657-4c28-9f6f-d9457a8d24b6"],
Cell[722302, 13647, 229, 4, 35, "Text",ExpressionUUID->"52c87207-abb7-437d-b05b-af09c21a0f07"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

